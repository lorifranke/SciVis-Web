DOI: 10.1111/cgf.12929
EuroVis 2016                                                                                                                          Volume 35 (2016), Number 3
R. Maciejewski, T. Ropinski, and A. Vilanova                                                                                        STAR – State of The Art Report
(Guest Editors)




                       State-of-the-Art Report in Web-based Visualization

                                                          F. Mwalongo1          M. Krone1      G. Reina1     T. Ertl1

                                                      1 Visualization   Research Center, University of Stuttgart, Germany




        Abstract
        In this report, we review the current state of the art of web-based visualization applications. Recently, an increasing number of
        web-based visualization applications have emerged. This is due to the fact that new technologies offered by modern browsers
        greatly increased the capabilities for visualizations on the web. We first review these technical aspects that are enabling this
        development. This includes not only improvements for local rendering like WebGL and HTML5, but also infrastructures like
        grid or cloud computing platforms. Another important factor is the transfer of data between the server and the client. There-
        fore, we also discuss advances in this field, for example methods to reduce bandwidth requirements like compression and other
        optimizations such as progressive rendering and streaming. After establishing these technical foundations, we review existing
        web-based visualization applications and prototypes from various application domains. Furthermore, we propose a classifica-
        tion of these web-based applications based on the technologies and algorithms they employ. Finally, we also discuss promising
        application areas that would benefit from web-based visualization and assess their feasibility based on the existing approaches.
        Categories and Subject Descriptors (according to ACM CCS):                                 I.3.2 [Computer Graphics]: Graphics Systems—
        Distributed/network graphics




1. Introduction                                                                             among different teams, but also simplifies software maintenance
                                                                                            issues, allowing visualization researchers and domain scientists to
Remote visualization has long been an important area of research
                                                                                            focus more on the core issues of their research. Moreover, this de-
motivated by the need to visualize huge amounts of data ranging
                                                                                            ployment model allows domain scientists to access latest visualiza-
from simulations over medical imaging to big data from social me-
                                                                                            tion techniques (e.g., getting access to a latest visualization tech-
dia or business intelligence. This need arises from insufficient com-
                                                                                            nique by simply refreshing a page). This close collaboration be-
putational resources at the user’s side (client). The reason can either
                                                                                            tween visualization researchers and domain scientists is also impor-
be relatively thin clients, like mobile phones, or the sheer amount of
                                                                                            tant for the visualization research community to avoid the danger
data to process. Even if computational resources at the client side
                                                                                            of loosing its users [Lor04].
were powerful enough, moving the full data set to the client quickly
becomes impractical due to bandwidth, latency or local storage lim-                            Another advantage of web-based solutions for the client-side is
itations. In certain scenarios, making the raw data available to other                      user convenience. Users (e.g., domain scientists) do not need to in-
users might also present legal or privacy issues. Here, remote vi-                          stall software, they just need a browser. Since browsers are mean-
sualization can be a viable solution. However, limited bandwidth                            while available on virtually all computing devices, users can flex-
is still the main challenge for remote visualization, together with                         ibly work from any device, anywhere, as long as there is Internet
network latency issues. Different approaches and techniques have                            connection and their data can be accessed remotely. As many vi-
been proposed over the years to solve these problems.                                       sualization solutions are currently GPU-based, shader code (being
   Despite the technical challenges addressed by past research, re-                         simple text files) can be hosted on a server together with the data
mote visualization is still an active area of research due to the con-                      and easily shared by multiple clients. This setup is attractive even
tinuous growth of data sets and gradual improvement of infrastruc-                          in cases where the data is not shared. A user with data on a local
ture and client devices. Web-based visualization in particular has                          machine can simply get the visualization code from a server and vi-
received much attention due to its ubiquity across platforms, rang-                         sualize the data locally instead of uploading the data to the server,
ing from desktop computers to smartphones, and its potential as a                           which may be expensive for large data sets or overload the server
collaborative platform [IES∗ 11].                                                           when many users are uploading their data sets. For large data sets,
                                                                                            moving computation (code) to the data is cheaper than moving the
   Web-based approaches can allow visualization tools to be de-                             data to the computation [GLNS∗ 05].
ployed across devices from single source code base. This does not
only allow easy collaboration and sharing of visualization tools                               Early techniques for web-based visualization exploited the use

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John
Wiley & Sons Ltd. Published by John Wiley & Sons Ltd.
554                                      Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

of VRML and Java applets in the browser, and server-side render-              concludes the paper and gives direction for future challenges con-
ing [ESE00, ESEE99, EE99, HJS98, TP97, WBW96]. Other tech-                    cerning web-based visualization.
niques have combined Java, JavaScript and Flash [JJAM11]. These
approaches usually lead to poor performance due to bandwidth
and latency issues. Historically, server-side rendering was favored,
                                                                              2. Technical Aspects
mainly due to limitations in browser technologies.
                                                                              This section discusses technical aspects about visualization as a
   However, advances in web technologies have greatly improved                web service, grid-based, and cloud-based visualization. Local ren-
and the current trend in web-based visualization is to exploit the            dering in the browser, data encoding, and transfer techniques are
power of GPUs through WebGL [Khr13, Khr11b] and HTML5                         also discussed. Remote visualization and web-based visualization
technologies for GPU-accelerated client-side rendering within the             in particular usually follows a client-server architecture. Grid and
browser without plugins. GPU-based visualization techniques help              cloud-based visualization approaches aim at scaling the server side
to improve rendering performance and interactivity by offloading              in order to tackle larger problems (e.g., rendering large models or
to the GPU expensive computations, which would otherwise be in-               complex preprocessing tasks) and support multiple users. In some
feasible on the CPU using JavaScript. Client-side rendering is pre-           scenarios where data resulting from simulations or other sources
ferred because it avoids the round-trip network latency suffered by           are already stored on the grid or cloud, this approach becomes
server-side rendering approaches that require changes in rendering            the only feasible solution as it is impractical to move these huge
or visualization parameters to be sent to the server in order to gen-         amounts of raw data.
erate new images. Despite these improvements, the ability to render
complex scenes in the browser can still benefit from offloading de-              Web-based visualization as an approach to remote visualization
manding computations (e.g., preprocessing) to the server side.                tries to exploit the ubiquity of the browser across operating systems
                                                                              and devices and other web technologies for wider deployment and
   This report gives an overview over available techniques for web-           collaboration. It is also used in grid and cloud-based visualization
based visualization. This includes a discussion of state-of-the-art           approaches where the browser acts as a deployment platform for
methods for rendering as well as a survey on infrastructure tech-             the client-side in a client-grid or client-cloud architecture.
nologies and optimization strategies, all of which enable interactive            The web environment is a heterogeneous platform where a vari-
visualization. These methods provide the foundation for web-based             ety of different tools (usually written in different programming lan-
visualization applications. Therefore, special attention is given not         guages and running on different platforms) have to work together
only to fast, GPU-accelerated rendering methods on the client but             harmoniously to accomplish a task. The concept of visualization
also to enabling server-side technologies like grid-based visualiza-          as a service has received attention lately. The idea is to apply the
tion, and the use of methods that reduce the required memory band-            principles of web services to visualization tools in order to enable
width like streaming or compression of visualization data. We also            seamless interoperability between different software tools. A com-
discuss available web-based visualization applications from vari-             mon trend among many approaches for grid and cloud-based visu-
ous application domains and review how they correlate with the                alization is to follow a web service approach. This trend is likely
previously detailed techniques. Furthermore, we provide a classi-             due to the distributed and heterogeneous nature of these environ-
fication that is based on this assessment, which gives a structured           ments where different nodes may be running on different platforms
overview of the related work. Finally, we discuss specific applica-           and have to be interoperable. This is in contrast to cluster environ-
tion scenarios benefiting from web-based visualization and provide            ments where nodes are also distributed, but in most cases homo-
practical advice to solve the concrete visualization problems raised          geneous with regard to hardware and software. Moreover, most of
by these applications. We also use our classification for a white spot        grid and cloud-based solutions are implemented on top of a grid
analysis concerning the use of certain technologies for specific ap-          or cloud middleware that itself follows a service-oriented approach
plication areas. We delineate our work explicitly from analyzing              (e.g., Globus Toolkit [Fos05]).
work related to collaborative visualization on the web, since this
is a vast field of its own and would go beyond the scope of this                 Shi and Hsu [SH15] provide a survey of interactive remote ren-
manuscript.                                                                   dering systems. While their work focuses on remote rendering ap-
                                                                              proaches, our work provides a comprehensive survey on remote
   The rest of this report is structured as follows: In section 2,            visualization in the web environment including grid-based visu-
we discuss technical aspects of web-based visualization. Avail-               alizations and cloud-based ones as well as visualization as a web
able web-based visualization applications and prototypes are re-              service. Their work also discusses latency hiding techniques for in-
viewed in section 3. Section 4 introduces a classification of these           teractive remote rendering and points out local rendering as a suit-
web-based visualization methods based on the technical aspects.               able latency reduction technique for interactive user experience. In
They are sorted using the previously given classification and ac-             our case, latency hiding as discussed by them is only relevant for
cording to their targeted application area. Based on this overview            image-based visualization approaches. Given the importance of in-
of available web-based visualizations, section 5 discusses several            teractivity in visualization, our work pays special emphasis on local
challenging real-world data sets from different application domains           rendering techniques in the browser that exploit modern web tech-
where users could benefit from web-based visualization. We also               nologies (e.g., HTML5 [W3C14] and WebGL [Khr13,Khr11b]. We
review their feasibility considering the previously mentioned avail-          also build on the classification scheme proposed by them (see Fig 1)
able technologies, techniques, and applications. Finally, section 6           to include infrastructure and optimization strategies (see Table 1).

                                                                                                                                                  c 2016 The Author(s)
                                                                                 Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                  555

             Model-based                            Image-based                          retain most of the flexibility provided by the second approach,
                                                                                         thus allowing users to connect various visualization services to
  Original Progressive Original         Model +      Image + Environment                 obtain more powerful visualizations. Wood et al. [WBS∗ 08] and
                                                                         Image
  Model      Model     Model             Image        Depth      Map                     d’Auriol [d’A11] follow this approach.
                                                                                            Viewing a visualization application as a single service would
                                                                                         provide a good abstraction when considering a visualization as an
                                                                                         integral component in the entire data analysis pipeline (e.g., com-
                             Network Bandwidth                                           bining simulation, analysis, and visualization) rather than a sepa-
                 more                                               less
                            Computation on Client                                        rate application. On the other hand, mapping each stage of the vi-
                                                                                         sualization pipeline to a web service or combining some services
Figure 1: Classification scheme for remote rendering proposed by                         into a single service may be more suitable for visualization appli-
Shi and Hsu [SH15].                                                                      cation developers. These may be interested in combining different
                                                                                         implementations of visualization techniques that provide different
                                                                                         capabilities or exploit special hardware features for each stage of
                                                                                         the visualization pipeline to create a new composite visualization
2.1. Visualization as a Web Service                                                      service for end users (e.g., domain scientists).
The World Wide Web Consortium (W3C) defines a web service                                   Another important aspect is the handling of data movement be-
as a software system designed to support interoperable machine-                          tween web services in a visualization pipeline. Web services can
to-machine interaction over a network [W3C04]. The main goal of                          exchange data directly with each other or through a centralized
web services is to allow seamless interoperability between different                     data store. Koulouzis et al. [KZSB10] compare the performance
software applications and tools that need to communicate in order                        of these two data movement approaches and show that direct data
to accomplish a particular task. Since the services interact based                       exchange between services provides better performance compared
on standardized interfaces without consideration of implementa-                          to employing centralized data storage.
tion details, software written in different programming languages
and running on different platforms can communicate and work to-                             On the implementation side, two main approaches are used,
gether smoothly without requiring manual integration by the user.                        SOAP-based web services [See01] and RESTful web ser-
This approach is especially important in heterogeneous distributed                       vices [Pau14], based on an architectural style first introduced by
systems.                                                                                 Fielding [Fie00]. Current trends [WPR10, WP11, RAR13] favor
                                                                                         RESTful web services rather than SOAP-based services due to their
   Main approaches for applying the concept of web services to vi-                       simplicity and easy integration with other web standards. Pautasso
sualization with regard to how the pipeline is partitioned can be                        et al. [PZL08] give a detailed architectural comparison between
grouped into three classes: in the first approach, the entire visual-                    these two approaches. Despite the popularity of RESTful web ser-
ization pipeline is treated as a black box and an application can                        vices in the business domain and cloud-based services, this ap-
be viewed as a single service. The user is provided with an inter-                       proach has not yet caught much attention with regard to visual-
face for specifying data to be visualized and interacting with the                       ization services. We discuss visualization as a web service in the
resulting visualization. Tableau Online [tab] and TIBCO Spotfire                         context of grid and cloud computing environments in section 2.2
Cloud [spo] are some of the examples that fall into this category.                       and section 2.3 respectively.
This approach has the advantage of being simple for the end user.
                                                                                            Web service approaches allow different tools to communicate
However, it may limit the users’ choice of visualization types that
                                                                                         and exchange data in standardized ways irrespective of their im-
can be created.
                                                                                         plementation languages, platforms, or devices on which they are
   In the second approach, each of the different stages of the visual-                   deployed. This would allow easy automation of the data analy-
ization pipeline as first described by Haber and McNabb [HM90],                          sis pipeline, where visualization is just a component. Components
is implemented as an independent web service. In this approach,                          need only agree on a communication protocol and keep their in-
the entire visualization pipeline is exposed to the user who can con-                    ternal implementation details to themselves. Moreover, decoupling
nect different services to create pipelines in order to generate var-                    the interface from implementation details allows each component
ious visualizations. These services can potentially be from differ-                      to be independently implemented and optimized based on its spe-
ent providers, implemented in different languages and running on                         cific task that it performs or special hardware features that it ex-
different platforms. Wang et al. [WBHW08], Zudilova-Seinstra et                          ploits.
al. [ZSYA∗ 08], and Charters et al. [CHM04] follow this approach
                                                                                            Existing work on visualization as a service has focused more
in the context of grid-based visualization. Although this approach
                                                                                         on applying the concept of web services to visualization software
provides the maximum flexibility for the end user, it may suffer
                                                                                         alone (i.e., interoperability between visualization system compo-
from inefficiencies due to communication overheads and excessive
                                                                                         nents) and less attention has been paid to interoperability between
data copying between services.
                                                                                         visualization services with other tools in the data analysis pipeline
   The third approach combines several stages of the visualiza-                          (e.g., simulation and analysis tools/services). The increasingly huge
tion pipeline into a single service. By combining some stages into                       amounts of data and complex analyses required to understand and
a single service, inefficiencies suffered by the first approach due                      gain insight can make single visualization tools inadequate for the
to communication and data movements can be avoided and still                             task, hence the need to combine multiple tools.

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
556                                       Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

   By providing programming language-independent and platform-                         Simulation
                                                                                                                           GVK                            GVK
independent interfaces to visualization services, it becomes easy to                     initVisualization                Portal                     Visualization
connect these tools together and potentially automate the creation                                                        Server                        Planner
of data analysis pipelines. This could be achieved through sophis-                   updateVisualization
ticated visualization workflow engines that can automatically or-
chestrate different visualization services given only the data to be
visualized and some user-provided visualization parameters for the                                                 Globus            Globus              Globus
desired output visualization. This would allow scientists to focus                                                 GRAM               GASS                MDS
on their domain research work, and reduce time spent manually
integrating software tools.

                                                                                                                            GVK Visualization Pipeline
2.2. Grid-based Visualization
Grid computing is a distributed system model that allows pool-
ing computational and storage resources to provide a high-                     Figure 2: Example for a visualization service using grid middle-
performance problem-solving computing infrastructure [FKT01,                   ware: setup of a simulation process including in-situ visualization
FKNT02]. Computational resources in a grid are distributed sim-                using the Grid Visualization Kernel (image adapted from Kanzl-
ilar to a cluster. However, while a cluster is usually built from re-          mueller et al. [KHRV04]).
sources that belong to a single organization, a grid combines re-
sources from multiple organizations that may be geographically
                                                                               based on the VTK library and is composed of data read, filter, map,
distributed [FK99]. Therefore resources in a grid environment are
                                                                               and render web services. Furthermore, the authors experiment with
usually heterogeneous compared to those in a cluster, which are
                                                                               two different models of data communication between web services:
typically homogeneous.
                                                                               centralized and distributed communication models. In the central-
   Grid-based visualization is motivated by high demands from                  ized model, services communicate through central data store and in
high-performance and complex simulations that use grid resources               the distributed model, they communicate directly. A service can act
for computation and storage of the simulation results. As the simu-            as a data producing or a data consuming service. In both models,
lations and other scientific instruments produce massive data, it be-          the URIs of data resources are exchanged between services rather
comes infeasible to visualize these data with only locally available           than the actual data. This is done for efficiency reasons.
computing resources. Therefore an infrastructure of similar mag-
                                                                                  Another difference between the centralized model and the dis-
nitude is required for data visualization. Computational and stor-
                                                                               tributed model is that, in the centralized model, the workflow en-
age resources in the grid are by nature geographically distributed,
                                                                               gine provides a URI of the central data store where the particular
the challenge for visualization algorithms is therefore how to ef-
                                                                               service should upload its results as an input parameter to the ser-
ficiently use this distributed infrastructure to achieve good perfor-
                                                                               vice. In the distributed model, each service returns a URI to the
mance while at the same time handling network bandwidth and la-
                                                                               workflow engine after completing its task. Other services can then
tency issues.
                                                                               use this URI to get the results. This URI is passed to the next ser-
   Much work in grid-based visualization exploits the use of web               vice in the pipeline which can then read the data directly from the
services. This is understandable given the heterogeneous nature of             provided URI.
the computing resources in these environments.
                                                                                  Wood et al. [WBS∗ 08] present a 3-layered architecture for web
   Koval et al. [KMS∗ 15] build a web-based front-end for visual-              service-based visualization. The architecture consists of a client
ization of data resulting from a simulation running in a grid com-             layer, a middleware layer, and a visualization layer. The client layer
puting infrastructure. Data preprocessing on the grid is used to filter        provides the user interface, the middleware layer provides an inter-
out data that is not relevant for the requested visualization in order         face to the visualization layer, and the actual visualization func-
to reduce the amount of data transfered to the client. Rendering is            tionality is provided by the visualization layer. The visualization
done on the client in WebGL using Three.js [Dan12] library. The                layer can be built on top of a visualization toolkit like VTK. The
motivation for client-side rendering is to minimize latency and im-            middleware layer decouples the user interface from the actual visu-
prove interactivity.                                                           alization service.
   Koulouzis et al. [KZSB10] apply a web service approach for en-                 The authors use a custom XML-based markup language called
abling domain scientists to flexibly create visualization applications         skML [DS05], to describe the visualization pipelines. They imple-
from distributed visualization pipelines in the context of medical             ment this architecture using SOAP-based web services [See01] that
image analysis. The use of a web service approach is motivated                 leverage grid services of the Globus Toolkit [Fos05] for communi-
by the need for collaboration between geographically distributed               cation between the web services and the visualization layer. An ear-
teams and interoperability of different tools in the analysis pipeline.        lier work by Brodlie et al. [BDG∗ 04] that incorporates the ability
Orchestration of the visualization is done through a visualization             to connect the visualization system to a simulation application for
workflow engine that controls the execution of the pipelines. Since            computational steering also builds on similar concepts. This archi-
services do not communicate directly, this model of interaction pro-           tecture is also used in a framework for configurable visualization
vides more flexibility. The implementation of the visualization is             systems called ADVICE [WSD∗ 10].

                                                                                                                                                   c 2016 The Author(s)
                                                                                  Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                   557

   Kanzlmueller [KHRV04] present a Grid Visualization Kernel                             storage resources to applications that run on the cloud through vir-
(GVK) based on Globus Toolkit [Fos05]. The authors propose a set                         tual machines. Foster et al. [FZRL08] provide a more detailed com-
of visualization services as an extension to the grid middleware ser-                    parison between these two paradigms.
vices that can be used as building blocks for creating visualization
                                                                                            Main categories of cloud services are Infrastructure as a Ser-
applications. Figure 2 shows how simulation applications register
                                                                                         vice (IaaS), Platform as a Service (Paas), and Software as a Service
with the GVK as sources of data and visualization clients can sub-
                                                                                         (SaaS) [MG11]. Cloud computing deployment models can be cate-
scribe through the kernel to view data produced by the simulations,
                                                                                         gorized as public, private or hybrid clouds [MG11]. There are both
linked to each other in a client-server architecture. To visualize data
                                                                                         commercial and open-source cloud platforms that provide different
from a simulation, a visualization request is sent to the GVK. The
                                                                                         services. Several popular open-source cloud management softwares
GVK initializes the visualization pipeline and remains connected
                                                                                         (e.g., Open Nebula [MVML12], Eucalyptus [NWG∗ 09], Cloud-
with the simulation. When the simulation has new data, it sends the
                                                                                         Stack [Apa10], and OpenStack [Ope10]) can be used for building a
simulation data to the GVK to update the visualization. To view
                                                                                         private cloud computing environment. Apart from providing cloud
the visualizations, a client (user or application interested to view
                                                                                         infrastructure management functionality, they also provide APIs to
the visualization) sends a visualization request to the GVK. Upon
                                                                                         interface with public clouds like Amazon.
receiving the request, GVK establishes a connection that links the
client with the visualization pipeline connected to a simulation that                       A cloud-based visualization service falls into the Software as a
the client has chosen to view its results.                                               Service (SaaS) category and can be built on top of a Platform as
                                                                                         Service (PaaS). Most available PaaS offerings, however, currently
   The kernel allows multiple visualization requests to be con-
                                                                                         support interpreted or byte-code based languages (e.g., JavaScript,
nected to a single simulation. One of the main advantages of this ar-
                                                                                         Python, Java, C#, PHP, etc). To host a service built using a compiled
chitecture is that it decouples the visualization clients with the sim-
                                                                                         language such as C++ would require deployment on a Infrastruc-
ulation providing the data source. This decoupling provides much
                                                                                         ture as a Service (IaaS).
flexibility and possibilities of linking between the simulation and
visualization clients.                                                                      As discussed in section 2.4, local rendering is important for in-
                                                                                         teractivity in a remote visualization scenario. Since cloud services
   Charters et al. [CHM04] build SOAP-based web ser-
                                                                                         are usually accessed using devices with limited computational and
vices [STK02] on top of Globus Toolkit [Fos05] by mapping each
                                                                                         storage resources (e.g., laptops, tablets, and smartphones), the main
of the visualization pipeline stages [HM90] as a separate web
                                                                                         challenge in cloud-based visualization is how to efficiently transfer
service. They further extend the original pipeline by introducing
                                                                                         data between the cloud and these devices while at the same time
bidirectional communication between the stages of the pipeline.
                                                                                         reducing requirements on computational resources at the client. To
The implementation of the visualization pipeline is based on the
                                                                                         address this challenge, cloud computing resources can be employed
VTK library [SML06]. A similar approach to web service based-
                                                                                         for demanding preprocessing tasks that extract and transfer only the
based visualization pipeline is advocated by Zudilova-Seinstra et
                                                                                         data necessary to generate the required visualization at the client.
al. [ZSYA∗ 08] who apply a service-oriented approach to create a
visualization framework for collaborative and distributed medical
data analysis.                                                                           2.3.1. GPU support in the Cloud

   As discussed in section 2.1, mapping each stage of the visualiza-                     Current visualization techniques rely on the computational power
tion pipeline as a separate web service may result into inefficiencies                   of the GPU to accelerate the rendering. For these applications to
due to communication overheads and excessive data movements                              benefit from the cloud computing platform, ability to access the
between the services.                                                                    GPU from virtual machines in the cloud is required.s Although
                                                                                         many hypervisors support virtualization of the majority of com-
                                                                                         putational resources (e.g., CPU, disks, and I/O devices), the virtu-
2.3. Cloud-based Visualization                                                           alization of the GPU is currently least supported. The main cur-
                                                                                         rent approaches for accessing the GPU from a virtual machine is
Cloud computing is a new model of distributed computing whereby
                                                                                         through GPU pass-through and virtual GPUs (currently provided
IT resources are delivered and accessed using Internet technolo-
                                                                                         by NVIDIA GRID or AMD Multiuser GPU) [Her13, AMD15].
gies [AFG∗ 10, MG11]. This new model is a result of advances in
virtualization, networking, and web technologies [EPM13]. Cloud                             In a GPU pass-through approach, a physical GPU can be as-
computing provides a flexible and scalable platform that can be                          signed for exclusive use by a single virtual machine. This approach
exploited for remote and collaborative visualization. Cloud-based                        provides a near-native performance because each virtual machine
visualization can be considered as an evolution of grid-based vi-                        has its own dedicated GPU. However, it does not scale well because
sualization; they all scale the server part in the client-server re-                     it does not allow sharing of the physical GPU among multiple vir-
mote visualization architecture and use distributed computational                        tual machines. One of the positive aspects of the cloud is that if one
resources. Although grids and clouds are similar in concept, they                        virtual machine fails, the workload can be automatically migrated
differ in the model of management and provisioning of computa-                           to other compute nodes. However, this is not possible when a vir-
tional and storage resources. Management of computational and                            tual machine has been directly assigned to a physical device. With
storage resources in the cloud is based on virtualization technol-                       the virtual GPU approach, a physical GPU is virtualized and can
ogy. That is, cloud management software depends on a virtualiza-                         be shared among virtual machines. That is, a virtual machine has
tion layer controlled by a hypervisor to provide computational and                       no direct access to the physical GPU. This approach provides more

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
558                                     Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

scalability by allowing a single physical GPU to be shared among             benefit cloud-based visualization more than cloud-based rendering
more than one virtual machine. Performance implications of such              alone. Given the latency sensitivity of interactive visualization ap-
a virtualization are quite complex though. Nvidia’s approach, for            plications, it would be ideal to perform rendering on the client-side
example, statically assigns a dedicated subset of available memory,          and offload other demanding preprocessing tasks on the cloud. Ad-
while compute power is time-slice-shared among guests.                       vances on GPU mobile technologies make this combination feasi-
                                                                             ble. Client-side avoids network induced latency and therefore is ap-
   Cloud management software depends on virtualization capabil-
                                                                             propriate for interactive visualization applications. Cloud comput-
ities provided by hypervisors (e.g., VMware, Microsoft Hyper-
                                                                             ing resources are already used to run simulations [KSL∗ 13,VPB09,
V, KVM, Xen, and XenServer) for managing GPU access from
                                                                             EH08]. These simulations usually produce massive data that can-
the virtual machines. Most of the hypervisors support GPU pass-
                                                                             not be visualized interactively using a single workstation. Since the
through, although there is no standardized way of support across all
                                                                             data, in this case, is already in the cloud, it becomes desirable to
the available hypervisors. To the best of our knowledge, NVIDIA
                                                                             host the visualization services also in the cloud to avoid moving
GRID GPUs are, at the time of writing, only supported in Mi-
                                                                             these massive data.
crosoft Hyper-V, VMWare, and XenServer [NVI15b], while AMD
Virtual GPUs only support VMWare [AMD15]. Of these three                        The requirement for GPU access in the cloud is not only bene-
hypervisors that support virtual GPUs, only XenServer is open-               ficial for cloud-side GPU-accelerated rendering. GPU-accelerated
source [Xen14]. As an open-source software, XenServer would                  computations on the server, for example using CUDA and OpenCL,
make a preferred choice for building a cloud-based rendering plat-           can provide high performance while still being energy efficient.
form in a research environment. Only CloudStack and OpenStack                Therefore, especially mobile devices, which are not as powerful
currently support the XenServer hypervisor among the open-source             as desktop machines, can greatly benefit from offloading expensive
cloud management toolkits. This means that, currently, Cloud Stack           computations to the cloud.
and OpenStack are the only open-source cloud management toolk-
its that can be used for setting up a private cloud environment              2.4. Local Rendering in the Browser
capable of hosting a cloud-based visualization service that lever-
ages the power of the GPU. This situation is, however, likely to             The main motivation for rendering at the client-side (i.e., locally in
improve due to research being done on GPU virtualization tech-               the browser) is to improve interactivity during visualization. Local
niques [DS09, GGS∗ 09, GMAC10, YWO∗ 12, TDC14, VSB14] and                    rendering avoids round trip latencies suffered by server-side ren-
demand for cloud gaming services [SLNC13, HHCC13].                           dering approaches. Recent advances in web technologies includ-
                                                                             ing improved JavaScript performance and widespread availability
   Currently, GPU-based cloud-side rendering is focused on gam-              of WebGL have made it possible to achieve high rendering perfor-
ing and on remote desktop solutions [DVS∗ 12]. Games are ren-                mance in the browser. In this section we focus only on techniques
dered in the cloud and streamed as video to the client [OTO13,               that utilize HTML5 and WebGL, as these are modern standards that
NVI15a]. To reduce latency, GPUs usually have built-in video en-             allow high performance rendering in the browser without requiring
coders enabling streaming the video to the client without addition-          additional plugins.
ally taxing the CPU. The clients for these gaming services are usu-
                                                                                The <canvas ...> element, introduced in the HTML5 stan-
ally mobile devices or game consoles and even TVs. Several stud-
                                                                             dard, provides a surface for graphics drawing through JavaScript.
ies [CWSR12, CCT∗ 11, SSB09] have shown that latency is still a
                                                                             The two most relevant rendering contexts that are supported cur-
challenge for cloud-based gaming. Since interactive cloud-based
                                                                             rently are 2d and webgl. The first one provides CPU-based 2D
visualization and gaming are both latency sensitive, cloud-based vi-
                                                                             rendering capabilities. An alternative to the 2D canvas API are
sualization faces similar challenges when employing cloud-based
                                                                             scalable vector graphics (SVG) usable through the <svg ...>
rendering. A hybrid approach for cloud-based visualization that
                                                                             HTML5 element. The second type of canvas context offers GPU-
combines cloud computation with client-side rendering can be an
                                                                             based 3D rendering capabilities through WebGL. WebGL exposes
attractive approach for latency-sensitive applications. We discuss
                                                                             an OpenGL ES 2.0-based API for GPU access through JavaScript
this approach in the next section.
                                                                             in the browser. Since the APIs provided by both rendering con-
   Virtual machine-based deployments of services in the cloud are            texts are low-level, many libraries and frameworks have been
not without limitations. Since each virtual machine requires a com-          built to simplify their usage and provide high-level functional-
plete operating system, memory requirements and communication                ity. Frameworks include X3DOM [BJK∗ 10,BEJZ09,BJDA11] and
overheads can be high [FFRR15]. The communication overhead                   XML3D [SKR∗ 10] that aim at integrating 3D graphics with the
can be due to I/O calls between a service running in the virtual             HTML5 document object model (DOM). X3DOM aims at support-
machine and the native hardware resources or communication be-               ing 3D graphics in the browser by integrating X3D with HTML5
tween services running in different virtual machines. The current            through bridging HTML, DOM, and XML3D models. XML3D ex-
trend toward widespread light-weight virtualization like containers          tends the capabilities of HTML5 to provide native support for 3D
(e.g., Docker Container [Mer14]) looks more promising in terms               graphics in the browser. These frameworks provide a declarative
of performance and efficient sharing of computational resources.             scene graph-based API for 3D graphics in the browser and are im-
This is similar to operating systems specifically tuned for cloud in-        plemented on top of WebGL. Their integration approach is similar
frastructure like Apache Mesos [HKZ∗ 11]. Docker Containers and              to that of SVG for 2D graphics. A 3D scene is described using
Apache Mesos both have GPU support (mainly NVIDIA GPUs).                     XML and embedded in a page by including a custom tag.
  Combining cloud and client side computing resources would                     Alternatively, GPU capabilities can be accessed in the browser

                                                                                                                                                 c 2016 The Author(s)
                                                                                Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                   559

via other libraries built on top of WebGL. Three.js [Dan12] and                          are computed in the fragment shader to generate the surface of
Babylon.js [bab] are popular JavaScript libraries that provide a pro-                    the object. To start the rendering pipeline and generate the frag-
grammatic scene graph-based API on top of WebGL rather than an                           ments, a proxy geometry is usually rendered. For example, a full
XML document-based scene graph as in X3DOM and XML3D.                                    screen quad or a tight bounding-box for the object can serve as a
More details on graphics libraries and frameworks can be found in                        proxy geometry. These techniques have the advantage of providing
a recent survey on 3D web graphics by Evans et al. [ERB∗ 14].                            high rendering performance and high quality images even for large
                                                                                         data [MKB∗ 15]. Depending on the implementation approach used,
   Modern browser offer additional capabilities to improve per-
                                                                                         an acceleration structure may be required for efficient ray-object
formance besides GPU access. Web workers can be used to
                                                                                         intersections [MKK∗ 14]. Figure 3 shows some exemplary images
exploit multi-core CPUs for background processing. Array-
                                                                                         produced by these techniques.
Buffers [Khr11a] are typed arrays used for binary data processing.
WebSockets [FM11] allow for full-duplex persistent communica-                               GPU-based volume ray marching is the state-of-the-art ap-
tion channels between client and server. Finally, WebRTC [W3C11]                         proach for direct volume rendering due to its performance and high
offers peer-to-peer communication between browsers to transfer                           image quality. This technique uses 3D textures (assuming the use
real-time audio, video, and data. The direct data communication                          of WebGL 2.0) or a set or atlas of 2D textures for data storage.
provided by WebRTC through its RTCDataChannel component has                              To initialize the rendering, a proxy geometry, usually the bounding
the advantage of providing lower communication latencies for col-                        box of the volume data is rendered. Similar to OpenGL on a desk-
laborative applications compared to WebSockets because it does                           top PC, there are two approaches for implementing this technique
not involve an intermediate server between the communicating                             using WebGL: multi-pass and single-pass GPU-based ray march-
clients. Moreover, peer-to-peer can scale better to larger numbers                       ing. In the multi-pass approach, the proxy geometry (usually the
of concurrent users than a client-server architecture. For example,                      volume bounding box) is rendered into a texture in order to get the
Desprat et al. [DJL15] implemented a collaborative 3D editor that                        entry and exit points of the rays in the volume data. These rays are
uses the WebRTC protocol for low-latency peer-to-peer communi-                           then used during the volume traversal pass in order to get the start-
cation and supports direct broadcast of real-time updates between                        ing point and the direction of the sampling rays. In the fragment
all connected clients. Andrioti et al. [ASK∗ 15] provide implemen-                       shader, the volume is sampled along the rays, classified, option-
tation details on integrating WebRTC and X3DOM in the context                            ally shaded, and iteratively composited to get the final color of the
of collaborative applications (educational gaming and video con-                         pixel. Congote et al. [CSK∗ 11] described the implementation of a
ferencing). In the following subsections, we provide an overview                         multi-pass volume ray marching for WebGL 1.0. Due to lack of 3D
of the different technical approaches that exploit these web stan-                       textures in the WebGL 1.0, the authors used 2D mosaic textures to
dards.                                                                                   store the 3D volume using 2D textures.
                                                                                            In the single-pass approach, which is for example used by
2.4.1. GPU-based Techniques
                                                                                         Mobeen and Feng [MF12], either the front or the back faces of
Techniques that exploit the GPU for rendering in the browser                             the volume’s bounding box are rasterized. Ray traversal is also per-
use polygon-based approaches or ray casting. Polygon-based tech-                         formed in the fragment shader by marching along the view ray in
niques typically use a library built on top of WebGL to generate or                      discrete steps through the volume and compositing the sample col-
import the meshes on the client side and upload them to the GPU                          ors to get the final pixel color. The main constraints for visualizing
for rendering. In other cases the meshes are streamed from a server                      large volumes of data in WebGL 1.0 are texture storage limitations
to the client.                                                                           and limited support for dynamic looping in shaders. Mobeen and
                                                                                         Feng [MF12] introduce a 3D texture slicing technique to address
   However, polygon-based techniques have some limitations. In
                                                                                         the problem of looping limitations by slicing the volume data with a
order to get smooth surfaces, fine tessellation is required, resulting
                                                                                         plane perpendicular to the view direction, as proxy polygons. These
in frame rates decreasing proportionally to the number of triangles.
                                                                                         polygons are then rasterized and finally blended to obtain the final
Furthermore, high numbers of triangles not only consume consider-
                                                                                         image.
able amounts of memory, but also require considerable CPU-GPU
bandwidth each time the geometry changes. Moreover, in a browser                             To address the problem of limited texture size, Noguera and
environment, generating geometry data on the CPU can result in                           Jiménez [NJ12] present a technique that slices the original volume
lower rendering performance if the rendering is stalled by said gen-                     and uses multiple textures to package the data for rendering. Sim-
eration (see, for example, Jmol [Jmo09]). Offloading the generation                      ilar to the aforementioned techniques, 3D textures are stored by
of geometry to a powerful server may not always help. Network la-                        tiling the volume data into a single large 2D texture.
tency and the bandwidth of the network as well as of the CPU-GPU
                                                                                            A different approach for volume visualization using WebGL is
interconnect may still negatively affect the resulting performance.
                                                                                         to extract geometry on the server side and performing rendering
To alleviate these problems, a preferable approach would be to use
                                                                                         on the client. Jiménez et al. [JLC∗ 14] presented a method that ex-
implicit, parametric geometry rendered using GPU-based ray cast-
                                                                                         tracts geometry of the 3D fractal dimension from volumetric data.
ing. This ensures that less data is transferred from CPU to GPU and
                                                                                         The geometry is rendered in the client using the Three.js [Dan12]
avoids performing expensive computations in JavaScript.
                                                                                         library. The visualization data itself is extracted from the original
   GPU-based ray casting techniques use parameters to define                             MRI data in a server-side preprocessing step using CUDA. It is en-
the implicit surface of an object (e.g., center and radius in case                       coded in various LODs and transmitted to the client in XML or
of a sphere) are sent to the GPU, and ray-object intersections                           JSON formats.

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
560                                      Mwalongo et al. / State-of-the-Art Report in Web-based Visualization




Figure 3: Visualization of molecular structures at interactive frame rates using WebGL-based ray casting techniques. Left: an insulin protein
(PDB ID: 1RWE, 823 atoms) and its close-up view with correct sphere-sphere intersections and pixel-accurate spheres [MKK∗ 14]. Middle:
a hemoglobin protein (PDB ID: 4HHB, 4,384 atoms) with toon shading effects generated through deferred shading [MKB∗ 15]. Right: capsid
of a papillomavirus (PDB ID: 3IYJ, 1.3 M atoms).



   Jacinto et al. [JKD∗ 12] use an image-based approach that ex-                 Ponchio and Dellepiane [PD15] present a mesh representation
tracts slices from the original volume data and sends them to the             that divides a model into patches with different levels of detail that
client as JPEG or PNG images that are then uploaded to the GPU                are independently encoded and compressed on the server. The rep-
as textures for rendering. The server side uses VTK library and the           resentation is optimized for fast decoding times. The patches are
client side uses Three.js [Dan12] library.                                    stored in a tree data structure that captures the dependencies of the
                                                                              patches. The server streams the requested patches in response to
   Mesh rendering. Many mesh rendering techniques use pro-
                                                                              HTTP Range requests from the client with each patch requiring a
gressive meshes to improve interaction. This is achieved through
                                                                              separate HTTP call. The received patches are encoded as an Array-
progressive decoding and rendering of the different levels of
                                                                              Buffer and are decoded in a web worker and rendered using the Spi-
detail (LODs) of the meshes. The main idea of progressive
                                                                              derGL library [DBPGS10]. Although issuing separate requests for
meshes [Hop96, Hop98] is to represent the mesh data in a low res-
                                                                              each patch has scalability problems, rendering performance does
olution (base mesh) together with operations (e.g., vertex split) to
                                                                              not suffer as long as it is done in a separate thread and commu-
reconstruct a mesh from the base representation at a desired level
                                                                              nication between a data fetching thread and a rendering thread is
of detail. This representation allows for efficient loading, decoding
                                                                              asynchronous.
and rendering. This is because only the operations to reconstruct
the model from the previously loaded one are necessary in order to               Another progressive representation that is optimized for fast de-
get a model representation at a required level of detail. This leads          coding times is presented by Lavoue et al. [LCD14]. The model is
to less data being transferred to the client and hence reduced band-          again stored in an ArrayBuffer, similar to the work of Ponchio and
width usage.                                                                  Dellepiane [PD15]. A client first loads a base mesh from a server
   Sawicki and Chaber [SC12] implement techniques for progres-                and other levels of detail are reconstructed progressively by ap-
sive visualization of 3D Meshes in the browser. Their solution is             plying vertex split operations to the model that is already received
targeted at mobile devices and focuses on efficient use of network            and decompressed. To get the next level of detail, the client issues
and computational resources. They use the aforementioned a pro-               a single HTTP request (using an XMLHttpRequest object). The
gressive mesh representation to allow streaming of different lev-             implementation uses a web worker for decoding and Three.js li-
els of detail to the client for rendering large models. The progres-          brary [Dan12] for rendering. The decoding and the rendering thread
sive mesh format is computed offline and stored on a server. A                communicate asynchronously to ensure that the two operations are
coarser model is first sent to the client and detailed models are pro-        decoupled.
gressively reconstructed based on vertex split operations that are
                                                                                  Wen et al. [WJL14] use a Light Weight Progressive Mesh (LPM)
streamed and received by the client in the background. Transfer-
                                                                              representation that simplifies the original model based on similar-
ring the detailed models is regulated by the client by taking into
                                                                              ity of components making up the model. The representation uses a
consideration the capability of the client device and current com-
                                                                              scene graph structure to store only unique elements of model com-
putational workload. Rendering in the client is handled through the
                                                                              ponents and transformation information for all their instances. The
Three.js library [Dan12].
                                                                              unique components of the model are represented at different levels
   Figueiredo et al. [FRSVP14] describe the implementation of a               of detail to allow progressive streaming and rendering. The bene-
system for the visualization of high-resolution mesh data via a low-          fit of this approach is that the client does not require a decoding
resolution overview and a high-resolution detail view. The simpli-            step because instanced rendering can be used directly to render
fied low-polygon mesh is sent to the client in X3D format [BD07]              the model. Again, a web worker is used to receive and progres-
and rendered in the browser using X3DOM [BJK∗ 10]. While the                  sively refine the base model as data for new levels (vertex splits)
simplified model is used for interaction and navigation, data for             are streamed to the client. However, the transferred data uses the
the detail view is extracted on demand from the original high-                JSON format, which can be less efficient in terms of bandwidth
resolution mesh stored on the server.                                         and client side processing compared to an ArrayBuffer.

                                                                                                                                                  c 2016 The Author(s)
                                                                                 Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                    561

   Techniques based on progressive meshes do not only help im-                           rendered on the client. Most approaches focus on efficient CPU-
prove rendering and interactivity but also help reduce bandwidth                         based decoding. Another option is to use GPU-friendly formats,
usage by reducing the number of triangles transferred to the client.                     which can be uploaded directly to the GPU. In this case, the de-
Combining progressive meshes with compression yields better re-                          coding is executed entirely on the GPU. This does not only im-
sults in terms of bandwidth and latency and hence offer significant                      prove performance by reducing decoding time on the client, but
improvements compared to when each technique is used individu-                           also requires less CPU-GPU bandwidth. We will discuss examples
ally. The work of Ponchio and Dellepiane [PD15] is an example of                         for these different categories in the following.
an approach that combines progressive meshes with compression.                              Lavoue et al. [LCD13, LCD14] use a CPU-based decoding tech-
                                                                                         nique that leverages a web worker for background processing. By
2.4.2. SVG/2D Canvas-based Techniques                                                    decoupling the decoding thread from the main thread, rendering
As mentioned in section 2.4, the <canvas ...> element pro-                               and user interaction performance is not affected by long decoding
vides a 2D graphics drawing API in addition to the 3D API pro-                           times. Data is stored in an ArrayBuffer for efficient processing.
vided through WebGL. It offers built-in functions for drawing paths                         Wen et al. [WJL14] present a progressive mesh compression
and several 2D shapes and text using JavaScript.                                         technique that is based on identifying similar parts in the model
   D3.js [BOH11] is a JavaScript library for information visual-                         and replacing redundant parts with instances of a single occurrence.
ization that builds on the document object model (DOM) of the                            A progressive mesh is subsequently obtained by creating continu-
browser as well as CSS and SVG. SVG (scalable vector graphics)                           ous levels of detail (CLODs) of each part (Lightweight Progressive
offers an alternative approach for 2D graphics rendering using a                         Meshes) that is then streamed and rendered progressively in the
markup language. D3.js allows users to bind data to be visualized                        browser using WebGL.
to DOM elements and manipulate their element properties based on                            Limper et al. [LJB∗ 13] present two progressive mesh encoding
the attribute values of the underlying data. It exposes the native doc-                  approaches (Progressive Binary Geometry and Sequential Image
ument model rather than providing its own data model, which can                          Geometry) based on the idea of using images for encoding geom-
introduce some overhead in translating between the two models.                           etry data. The benefit of using standard image formats is that de-
Moreover, direct manipulation of the DOM can lead to poor per-                           compression can be handled by the browser without requiring de-
formance, especially for large data sets, as the browser may be re-                      coding in the application code. Decoding can be performed on the
quired to layout, paint, and composite whenever the DOM changes.                         CPU or on the GPU depending on the texture fetch support in the
However, by using the DOM model, seamless interoperability with                          vertex shader stage. Their performance results show that Progres-
other web standards is ensured.                                                          sive Binary Geometry performs better with respect to progressive
                                                                                         decoding. A related approach has been presented by Dworak and
2.5. Data Encoding and Transfer Techniques                                               Pietruszka [DP15]. They describe how to encode 3D mesh data (in
                                                                                         .OBJ format) using the PNG file format for efficient data transfer
Efficient data encoding and transfer are important for interactive vi-                   and lossless compression.
sualization in the browser. Without efficient data transfer formats,
bandwidth and latency issues can lead to long waiting times until                           Limper et al. [LTBF14] present a general container file format
data is available on the client. In case of dynamic data, this can                       called Shape Resource Container (SRC) optimized for streaming
hamper real-time data updates for smooth animations of time se-                          3D mesh data and direct data upload to the GPU. The original
ries. While compression reduces the amount of data to be trans-                          mesh data is split and encoded into separate buffer chunks that can
ferred and hence save bandwidth, it cannot guarantee interactive                         be transmitted progressively to the client. The geometry and tex-
data updates by itself. This is because overhead in compression and                      ture data are transmitted in interleaved manner to allow for proper
decompression times can outweigh the savings in transfer times.                          decoding of textured geometry. The different chunks encode differ-
                                                                                         ent levels of detail of the mesh. In order to minimize the number
   Ideally, the entire data transfer pipeline from data encoding,                        of request calls, the buffer chunks are encoded in a single binary
transfer, decoding to rendering should be optimized to obtain bal-                       file. This differs from an earlier format [LJBA13] that stores each
anced end-to-end performance. Most techniques focus on optimiz-                          chunk as a separate file downloaded in a separate HTTP request.
ing only one or a combination of pipeline stages. The bottleneck                         The implementation of the container is integrated into the X3DOM
is usually in the decoding and rendering stages since these are per-                     framework. By using a GPU-friendly binary buffer representa-
formed at the client side. Various compression and decompression                         tion [BJFS12], the transmitted data can be directly uploaded to the
approaches proposed for the web focus on allowing for efficient                          GPU for rendering without incurring decoding overhead. The con-
decoding and rendering rather than only optimizing compression                           cept has been enhanced into a more generic approach [BMP∗ 15]
ratios. Limper et al. [LWS∗ 13] investigated this taking into con-                       that can switch to image streaming depending on client capabilities.
sideration the capabilities of different client devices and network                      This also includes a hybrid stategy to enable server-side culling if
bandwidth capacity.                                                                      required.
   Streamable and progressive mesh formats (see also section 2.4)                           Sutter et al. [SSS14] present a general container format for
are an established means to hide latency and improve interactivity                       streaming binary data that uses a chunked data representation. The
and consequently user experience. The mesh data is usually repre-                        chunks are independent and each consists of a header and a body
sented at different levels of detail and each level is encoded as a                      part. Each chunk of data can store a different level of detail for pro-
separate chunk of data that can be progressively decompressed and                        gressive rendering or a different encoding for adaptive transmis-

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
562                                      Mwalongo et al. / State-of-the-Art Report in Web-based Visualization




Figure 4: Interactive visualization of a large mesh in the browser using view-dependent compression [PD15]. The right image shows the
resolution of the model as seen from the view point shown in the left image. Fine details are only used for regions that are close to the camera
to reduce bandwidth requirements (image created using the authors’ tools: web3d.duckdns.org, last accessed 2016/04/29).



sion depending on various network bandwidth conditions. In their
implementation, chunking is used as a way to handle network con-
nections with various network bandwidths by allowing each chunk
to contain different data sizes depending on the capacity of the con-
nection. Since data chunks are independent, they can be transmitted
independently and processed in parallel. It is, however, also pos-
sible to transmit multiple resources in a single request to reduce
latency. The implementation is integrated into the XML3D frame-
work. They further provide benchmark results with other existing
formats.
   Ponchio and Dellepiane [PD15] present a technique for mesh
rendering in WebGL that combines view-dependent levels of detail,
progressive decoding, and mesh compression. Their goal is to mini-
mize decoding time. The technique leverages HTTP range requests
for progressive loading of each model level and ArrayBuffers for
efficient processing in JavaScript. The technique compresses both
geometry and connectivity information. Level-of-detail representa-            Figure 5: Volume visualization of meteorological data [YSG15].
tions allow progressive rendering on the client where a low detail            The volumetric data is compressed before sending it to the
model is first rendered and progressively refined as the detailed rep-        client to reduce data transfer times. (image created using the
resentation becomes available. Since the different representations            online demo: http://examples.x3dom.org/example/
are independently decoded and rendered, this minimizes decoding               RadarVolumeStyle/ )
time and hides latency, thus improving interactivity. Additionally,
compression allows for efficient use of bandwidth. View-dependent
level-of-detail techniques allocate more details for the models that
are in view while those at the periphery are represented at lower             3. Web-based Visualization Applications
levels of detail. Figure 4 shows an example of this view-dependent            In this section, we give an overview of web-based visualization
level-of-detail visualization.                                                applications from various application domains. These applications
   Yang et al. [YSG15] present a compression technique for time-              use the methods described in section 2.
varying volumetric data that combines the S3TC texture compres-
sion standard with DEFLATE compression techniques for efficient
                                                                              3.1. Particle Data Visualization
transmission of weather data to the browser through a web socket
connection (see figure 5). The technique works by encoding scalar             Molecular visualization in the browser has been popular from the
values of the volume into RGBA image components prior to apply-               early beginnings of the web. The visualization of molecular data as
ing compression. On the client side the compressed data is inflated           calotte model is an example for particle-based visualization where
to get the compressed texture and uploaded directly to the GPU as             each atom is depicted as a sphere. The size of each sphere repre-
video textures for rendering (WebGL has direct support for video              sents the van-der-Waals radius of the corresponding element. When
textures). The technique is implemented as an X3D extension to the            using polygon-based rendering, these spheres have to be tessellated
X3DOM framework.                                                              into triangles that are then rasterized.

                                                                                                                                                  c 2016 The Author(s)
                                                                                 Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                   563




                                                                                         Figure 7: Protein visualization using hyperballs and a semi-
Figure 6: Interactive visualization of the chaperonin complex
                                                                                         transparent molecular surface in the NGL Viewer [RH15] (PDB
(PDB ID: 1AON, 58,674 atoms) on a webpage. (image produced
                                                                                         ID: 1VIS). (Image created using the official NGL website:
using PV protein viewer [pvp])
                                                                                         http://proteinformatics.charite.de/ngl/html/
                                                                                         ngl.html)

   Jmol [Jmo09], implemented as a Java applet and its recent re-
implementation in JavaScript, JSMol [JSm13] are some of the most
popular tools used for visualizing protein structures. The main                          that generating the acceleration structure in the server gives bet-
limitation of Jmol is that it requires users to install a browser                        ter performance compared to generating it on the client-side us-
plugin. While JSmol alleviates the plugin problem, it still lacks                        ing JavaScript. This setup can be generalized to any visualization
the capability of handling large molecules. Both Jmol and JS-                            pipeline where a computationally demanding preprocessing step is
Mol use polygon rendering. Callieri et al. [CADB∗ 10] also use                           offloaded to the server/cloud and rendering is performed on the
polygon-based rendering for the visualization of molecular data                          client. They also follow the concept of decoupling the rendering
via the SpiderGL library [DBPGS10]. Additional recent exam-                              loop from the server processing and network transfers to avoid
ples of web-based molecular viewers are NGL Viewer [RH15],                               stalling the rendering thread.
3DMol.js [RK15], and PV [pvp]. Figure 7 shows a visualization
                                                                                            Although the use of acceleration structures created in a prepro-
produced by the NGL Viewer. They all leverage WebGL for visu-
                                                                                         cessing step works fine for static data, it can become a bottleneck
alization of molecular structures in the browser. The RCSB protein
                                                                                         for dynamic data. Solutions that avoid this preprocessing step be-
data bank [BWF∗ 00] web site, for example, uses PV as one of its
                                                                                         come important for dynamic data. Such an approach is used by
integrated protein viewers. Figure 6 shows one of the visualizations
                                                                                         Mwalongo et al. [MKB∗ 15]. Their solution is capable of visualiz-
produced using PV. iView [HLW14] is another protein viewer that
                                                                                         ing time-varying molecular data from molecular dynamics simu-
also incorporates virtual reality features. Li et al. [HLW14] pre-
                                                                                         lations with over one million atoms at interactive frame rates (see
sented a visualization tool for protein-ligand complexes that was
                                                                                         figure 3). The application achieves this performance by using GPU-
built using Three.js [Dan12]. Beside the aforementioned calotte
                                                                                         based ray casting for rendering instead of traditional polygon-based
model, most of these viewers support other commonly used visu-
                                                                                         rendering. Moreover, the implementation decouples fetching data
alizations for molecular data (e.g., molecular surfaces or ball-and-
                                                                                         from the server from the rendering loop through a web worker to
stick models), which are derived from the particle positions. These
                                                                                         ensure interactivity. Persistent and bidirectional communication be-
additional representations are all the same based on a polygonal
                                                                                         tween client and server is achieved through the use of a WebSocket
representation and rendered using the same techniques.
                                                                                         to avoid overhead of establishing new network connections for each
   Visualization of dynamic molecular data (trajectories) from                           new request.
molecular simulations is also an important feature for domain sci-
                                                                                            Chandler et al. [COJ15] present a WebGL remote visualization
entists. This capability has up to recent years been confined to desk-
                                                                                         solution for smoothed particle hydrodynamics (SPH) simulation
top solutions. As discussed in section 2.4.1, two main approaches
                                                                                         data. The server side preprocesses data by creating an octree data
can be used for rendering spheres: GPU-based ray casting and mesh
                                                                                         structure for storing a multi-resolution model for each time step.
rendering. GPU-based ray casting techniques offer better results in
                                                                                         Streaming of data to the client is done for each individual time step.
terms of rendering performance and image quality.
                                                                                         The client initially receives a low-resolution model from the server
   Mwalongo et al. [MKK∗ 14] present a client-server approach for                        and then high resolution models are incrementally loaded as the
visualization of static molecular data sets involving a grid accel-                      rendering progresses. This is done to avoid long latencies before
eration structure to speed up ray-sphere intersection calculations.                      the first view of the model is rendered. The received octree data
They implement two different approaches for generation of the                            structure is encoded as a texture and uploaded to the GPU during
acceleration structure as a preprocessing step. Their results show                       rendering. Since the solution uses a WebGL 1.0 implementation

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
564                                     Mwalongo et al. / State-of-the-Art Report in Web-based Visualization




Figure 8: Example of medical volume rendering in WebGL us-                   Figure 9: Example of the web-based medical volume rendering
ing volume ray marching. (image source: [MF12] c 2012 IEEE.                  presented by Jacinto et al. [JKD∗ 12]. The isosurface meshes were
Reprinted by permission.)                                                    extracted on the server using Marching Cubes and rendered on the
                                                                             client using WebGL. (image source: [JKD∗ 12] c 2012 Associa-
                                                                             tion for Computing Machinery, Inc. Reprinted by permission.)

that does not support 3D textures, the textures are packaged as 2D
textures and address translation is used to access the data in the
shaders. Moreover, fetching and processing of data in the client is          cian. The camera feed is also used as input for the JSARToolKit,
done in a web worker to avoid stalling the rendering or UI interac-          which takes care of marker tracking. That way, a virtual model of
tions in the main thread.                                                    a patient equipped with said markers can be synchronized with the
                                                                             visualization.
                                                                                Hou et al. [HSZ15] presented an image-based technique to vi-
3.2. Volume Visualization
                                                                             sualize medical volumes. They used a server-side GPU-accelerated
As mentioned in section 2.4, Congote et al. [CSK∗ 11] presented an           rendering and stream each generated frame to the client for dis-
early work on volume visualization using GPU-based ray march-                play. The rendering engine on the server uses CUDA and the VTK
ing in WebGL. They use a multi-pass GPU-based volume ray cast-               library for rendering the data to a framebuffer object (FBO) that
ing approach to visualize volumetric data from medical imaging               is then read back and sent to the client. The advantage of this ap-
and weather radar scans. Their work forms a basis for the im-                proach is that it benefits from powerful computational and storage
plementation of MedX3D in X3DOM—MEDX3DOM [Con12].                            resources on the server side. However, by doing the rendering on
MedX3D [JAC∗ 07] is an extension of the X3D standard [BD07]                  the server, smooth interaction on the client is affected due to round
to support web-based volume visualization. Other volume visual-              trip network latency.
ization systems for large medical data were introduced by Mobeen
and Feng [MF12] (see figure 8) and Noguera and Jiménez [NJ12].
                                                                             3.3. Geospatial data Visualization
Both systems also run efficiently on mobile device browsers.
                                                                             Visualization of geospatial data, including spatial-temporal data
   Jiménez et al. [JLC∗ 14] presented a client-server application for
                                                                             (4D), on the web covers various kinds of data like ma-
the analysis of the 3D fractal dimension of MRI data.
                                                                             rine data [RWW14], raster-images [JaL16], weather forecasting
   Jacinto et al. [JKD∗ 12] presented a client-server application for        data [DPD∗ 15], and city models [GVB∗ 15]. Common among all
medical volume segmentation and rendering. The segmentation                  modern web-based geospatial visualization is the use of WebGL for
uses an image-based approach that extracts slices from the origi-            hardware-accelerated rendering and other modern HTML5 tech-
nal volume data on the server and sends them to the client as JPEG           nologies. Some approaches [RWW14, GVB∗ 15] use WebGL di-
or PNG images, where they can be annotated to trigger the segmen-            rectly and others [MYB14,KPS15] use declarative frameworks like
tation on the server. Isosurfaces are extracted from the segmented           X3DOM. X3DOM implements a component from the X3D stan-
volume and sent to the client for visualization. The server side uses        dard for visualization of geospatial data [PM15].
the VTK library and the client side uses the Three.js [Dan12] li-
                                                                                The overview-and-detail visualization for mesh data by
brary for rendering the isosurface meshes (see figure 9). One tar-
                                                                             Figueiredo et al. [FRSVP14] described in section 2.4.1 was used for
geted application is the fast extraction of knee bones for prosthetic
                                                                             the visualization of geomorphological structures of an underground
design.
                                                                             cave in the browser. A 3D mesh representing the surface of the cave
   A medical visualization application that exploits augmented re-           was generated from a detailed point cloud and stored on a server at
ality capabilities has been shown by Virag et al. [VSTA14]. The              different levels of detail. The overview can be used to navigate and
system is designed using a client-server architecture, but also takes        select stalactites or stalagmites and request a high-resolution rep-
advantage of WebRTC for accessing a camera and transmitting the              resentation of the filtered neighborhood of these relevant structures
imagery to remotely allow for a second opinion from another physi-           for detail analysis.

                                                                                                                                                 c 2016 The Author(s)
                                                                                Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                  565




Figure 10: Examples of a web-based geospatial visualization ap-
plication. (image source: [RWW14])                                                       Figure 11: Examples of web-based information visualization us-
                                                                                         ing FluidDiagrams [AW14]. (image created from examples on
                                                                                         the author’s homepage http://digitalwright.net/msc/
                                                                                         examples/, last accessed 2016/04/29)
   Resch et al. [RWW14] describe a prototypical implementation of
a web application for visualization of 3D time-dependent geospa-
tial data to support non-experts in decision making (see figure 10).
They further discuss various user requirements including usability,                      sets. In order to achieve this scalability, they use binned aggrega-
representing 4D geo-data for such applications, their implemen-                          tion techniques to reduce the amount of data to be visualized and
tation aspects and performance. Moreover, the authors highlight                          exploit GPU acceleration for parallel computation and rendering.
challenges of representing spatial-temporal data in web-based vi-                        Data reduction techniques combined with the use of data tiles al-
sualization tools.                                                                       low efficient visual analysis of large data sets.

   Jenny et al. [JaL16] introduce hardware-accelerated projection
techniques for raster images used in web-based geospatial visual-                        3.5. Generic toolkits
ization. These techniques allow users to control the center of the
                                                                                         Several generic web-based visualization toolkits exist, covering a
map at any location, giving them the flexibility to view the map at
                                                                                         range of application domains including information visualization,
different global scales with minimal distortions.
                                                                                         protein visualization, medical visualization, and geospatial visual-
   Gaillard et al. [GVB∗ 15] present a client-server framework for                       ization. Most of these toolkits discussed in this section use client-
visualizing large city models and discuss the importance of pro-                         side rendering that employs modern browser-based web technolo-
gressive meshes for high performance rendering. They use progres-                        gies like WebGL.
sive textures in order to render large city models containing giga-
                                                                                            FluidDiagrams [AW14] is a prototypical toolkit that offers
bytes of data at interactive frame rates. Multiple resolution textures
                                                                                         GPU-accelerated implementations of various information visual-
are generated from the data and stored on the server and then trans-
                                                                                         ization techniques (e.g., bar charts, scatter plots, line charts, hy-
mitted to the client for rendering using WebGL.
                                                                                         perbolic browser, parallel coordinates, and cone trees) using the
                                                                                         Three.js [Dan12] library (see figure 11). The authors demonstrate
3.4. Information Visualization                                                           that their WebGL-based implementation is capable of scaling to
                                                                                         large data sets and achieves higher frame rates compared to those
Sarikaya and Gleicher [SG15] present a WebGL-based implemen-
                                                                                         based on SVG (e.g., D3 [BOH11]) or the 2D Canvas API [W3C15].
tation of the Splatterplots technique [MG13] for interactive visual-
ization of large two-dimensional point data sets. Splatterplots ad-                         Goecks et al. [GET∗ 13] discuss various server and client web-
dress the problem of overdraw in regular scatter plots that arise                        framework components for simplifying the creation of visual anal-
when visualizing large point data sets. Computations that were                           ysis applications for high-throughput genomic data. They further
performed on CPU in the original implementation [MG13] were                              describe how the components are used to create several concrete
moved to GPU using render-to-texture techniques in order to attain                       applications. The components are implemented and integrated into
better performance.                                                                      the Galaxy web platform [GNTT10].
   Liu et al. [LJH13] present techniques for visualization of geolo-                        ManyEyes [VWvH∗ 07] was a public information visualization
cated data in WebGL. They use a client-server architecture where                         website that allows users to upload their data, visualize them, and
the server preprocesses the data before streaming them to the client                     finally annotate the visualizations while sharing them with others.
for rendering. The preprocessing involves pre-computing data tiles
                                                                                            Popular commercial cloud-based information visualization so-
from data cubes and then encoding them as image files. These im-
                                                                                         lutions include Tableau Online [tab] and TIBCO Spotfire
ages are transferred to the client and uploaded to the GPU as tex-
                                                                                         Cloud [spo]. These solutions provide Software as a Service (SaaS)
tures. On the client side, the authors employ a two-pass approach
                                                                                         tools for creating various interactive visualizations using local or
for rendering: The first pass is a computation step. It uploads the
                                                                                         online data and allow sharing the visualizations amongst users.
data tiles to the GPU and computes summary values. The results
                                                                                         These commercial solutions are usually designed to scale to very
are written to a framebuffer object (FBO). The second pass is a
                                                                                         large data sets and many concurrent users.
rendering pass that uses the textures generated in the first pass to
render the final images. The focus of their techniques is to achieve                        The X Toolkit [HRA∗ ] is a WebGL-based framework for in-
interactive and perceptual scalability for visualization of large data                   teractive visualization of medical data sets in the browser. The

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
566                                      Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

toolkit supports various data formats and visualizations from the             and assess their practicability based on this classification of already
neuroimaging domain. Additionally, it supports various data for-              available methods and applications.
mats for surfaces and volumes. Using this toolkit, Haehn et
al. [HKBR∗ 14] developed a web-based application for collabora-               5. Discussion
tive proofreading of brain data that supports 2D and 3D visualiza-
tions.                                                                        There are a number of relatively obvious benefits to web-based
                                                                              visualization, especially from the perspective of potential users.
   Cesium.js [Gra12] is a general library for geospatial data visual-         When there is no need for installing specific software to gain ac-
ization that relies on WebGL for fast rendering. It supports various          cess to visualization, there is basically no hurdle putting it to use.
standard data formats as well as the glTF format [Khr15] for the              Such a configuration has no restrictions reaching out to potential
exchange of 3D data between client and server.                                users and is thus optimal for dissemination and education. Due to
   Jomier et al. [JJAM11] discuss the integration of Par-                     the ubiquity of browsing capabilities via smartphones and tablets,
aviewWeb [JAG10] with a medical and scientific data management                users with Internet access over the air can access any visualization
system (MIDAS) [JAM∗ 09] for visualization of large data sets. The            on the go. This development is only slightly hampered by the de-
system uses a remote rendering approach where images are ren-                 velopment speed of WebGL and the GPU capabilities of mobile
dered on the server and streamed to the client for display. Their             devices. With the mobile scenario in mind, it is effectively a benefit
integration setup uses a client-server architecture between the data          if users do not store the data they want to visualize on their work-
management system and the visualization server. The user selects              station, but on some centralized storage system. That way, it makes
what data to visualize through a web-based user interface of the              no difference from which client visualization and analysis will be
data management system. Subsequently, the visualization request               performed. The nearer the storage to the visualization service, the
is forwarded to the visualization server.                                     better, be it on the machine serving the visualization web pages or
                                                                              some dedicated storage system closely coupled with the web server.
   Badam and Elmqvist developed Polychrome [BE14], an appli-                  Scaling the storage space to grid or cloud does affect the bandwidth
cation framework that allows synchronized interaction with web-               and latency to the web server component, however the infrastruc-
based visualization. This mainly focuses on the interaction side of           ture on that end will rarely be the limiting factor, especially when
visualization and can be used for online collaboration as well as UI          also considering over-the-air clients. Additionally, it must be con-
synchronization across devices or remote control. Interaction mode            sidered that time-dependent data automatically increases linearly in
extensions to X3D/X3DOM concerning navigation and manipula-                   size with the number of time steps compared to the static case.
tion for web-based CAD applications are also described by Mou-
ton et al. [MPJ∗ 14]. However, as mentioned in the introduction, we              Once the visualization ecosystem is configured that way, some
will not further elaborate on interaction and collaborative systems           limiting factors that typically affect low-cost clients can be re-
as this is out of scope for this state-of-the-art report.                     moved automatically. Large-scale spatial data e.g. from current
                                                                              simulations can be stored much easier on server-class hardware or
                                                                              specialized storage systems since these are far easier to scale than
4. Classification for Web-based Visualization                                 client storage. In that case, problems arising from long download
We propose a classification of web-based visualization applications           times or limited local storage on the client side are automatically
that enables the assessment of the technical foundations and applied          mitigated. Concrete examples from scientific visualization follow.
methods of the respective visualization. Our classification is based             Considering the use case of flow visualization, the data need
primarily on the infrastructural distribution of storage and render-          not necessarily be excessively large to be taxing to visualize, since
ing effort. The next level is divided by the technical and algorith-          many flow visualization techniques require long integrations, for
mic approach to rendering, which is tightly coupled with the type             example when computing streak- or streamlines [SD11, KSWE16]
of data that is visualized. The lower levels specify the optimizations        or FTLE separatrices [BSDW12, SUEW12]. If the integration is
applied to data transfer and rendering. We also included miscella-            performed on the server, the base representation of the vector field
neous features, namely the employment of compression algorithms               needs to be transmitted once per configuration, using any optimiza-
and the exploitation of GPU acceleration, as both can have major              tion as per section 2.5. Post-classification is cheap enough to be
influence on the interactivity of the resulting approach. These fea-          applied on the client, so the user can interact with the color map
tures are treated separately from the other lower levels since they           and highlight values of special interest. Additionally, line geome-
provide a generic and data-agnostic means for accelerating the vi-            try needs to be transmitted, which can be optimized as shown by
sualization.                                                                  Ponchio and Dellepiane [PD15]. WebGL enables rendering even a
                                                                              large number of lines interactively. One popular application that is
   Table 1 gives an overview of the web-based visualization appli-
                                                                              also interesting to the general public as well as scientists is repre-
cations introduced in section 3. The table classifies the applications
                                                                              sented by weather data like forecast simulations or real-world mea-
based on the aforementioned criteria. The resulting overview shows
                                                                              surements. Here, pre-rendered visualizations could be replaced by
which technical approaches and infrastructures were used by which
                                                                              user-explorable ones where the user can dynamically choose the
application domain. We sorted the available visualization applica-
                                                                              region of interest, important regions of the depicted attributes (only
tions by the targeted application area to provide direct access to
                                                                              rain or wind worse than a determined amount, as comfort is a very
the available techniques based on the scenario a practitioner has at
                                                                              personal measure) and freely navigate the simulated time.
hand. In the following section, we will discuss visualization sce-
narios that would potentially benefit from web-based visualization               A second use case is found in the visualization of particles, for

                                                                                                                                                  c 2016 The Author(s)
                                                                                 Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                                                 Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                                                                                          567

Table 1: Web-based visualization tools and methods from various application domains. The visualizations are classified according to the
criteria given in section 4 (bullets). They are sorted according to the application domain in order to provide quick overview of the methods
that were applied in these fields. Within one application domain, the visualizations are sorted by year to show potential trends.

   Reference                 Infrastructure                                       Technique                                         Transfer                      Optimization                          Misc.           Application




                                                                                                                SVG/2D Canvas
                                                                                                Triangle Mesh




                                                                                                                                                                                                    Compression
                                                  Cloud-Based
                       Web Service




                                                                                                                                       Progressive
                                     Grid-Based




                                                                                   Raycasting




                                                                                                                                                                            Bandwidth
                                                                                                                                                     Simplified




                                                                                                                                                                                        Rendering
                                                                                                                                                                  Latency
                                                                        Volume
                                                                Local




                                                                                                                                                                                                                  GPU
                                                                                                                                Full
   [SC13]                                                       •                                                                                                                                                       3D Models
   [LJB∗ 13]                                                    •                                 •                                      •             •           •        •            •            •           •     3D Models
   [LCD14]                                                      •                                 •                                      •             •           •        •            •            •           •     3D Models
   [FRSVP14]                                                    •                                 •                                      •             •           •        •            •                        •     3D Models
   [LTBF14]                                                     •                                 •                                      •             •           •        •            •                        •     3D Models
   [WJL14]                                                      •                                 •                                      •                         •        •            •                        •     3D Models
   [GVB∗ 15]                                                    •                                 •                                      •             •           •        •            •                        •     3D Models
   [PD15]                                                                                         •                                      •             •           •                                  •           •     3D Models
   [BDG∗ 04]           •             •                                                            •                                                                                                                     Computational Steering
   [KHRV04]            •             •                                                            •                                                    •                                                                Computational Steering
   [d’A11]             •             •            •                                                                                                                                                                     Computational Steering
   [KMS∗ 15]           •             •            •                                               •                                                    •           •        •                                     •     Computational Steering
   [RWW14]                                                      •                                 •                                                                                                               •     Geovisualization
   [JaL16]                                                      •                                 •                                                                                                               •     Geovisualization
   [DPD∗ 15]                                                    •                                                •                                                                                                      Geovisualization
   [KPS15]                                                      •                                 •                                      •             •                                                          •     Geovisualization
   [MYB14]                                                      •                                 •                                                                                                               •     Geovisualization
   [PM15]                                                       •                                 •                                                                                                               •     Geovisualization
   [spo]                                          •                                                                                                                                                                     Information Visualization
   [tab]                                          •                                                                                                                                                                     Information Visualization
   [GET∗ 13]                                                    •                                                •                                                                                                      Information Visualization
   [LJH13]                                                      •                                                                                                                                                 •     Information Visualization
   [AW14]                                                       •                                 •                                                                                                               •     Information Visualization (Toolkit)
   [SG15]                                                       •                                 •                             •                                                                                 •     Information Visualization (Toolkit)
   [CADB∗ 10]                                                   •                                 •                                                                                                               •     Molecular Visualization
   [HLW14]                                                      •                                 •                             •                                                                                 •     Molecular Visualization
   [MKK∗ 14]                                                    •                    •                                                                 •           •        •            •                        •     Molecular Visualization
   [MKB∗ 15]                                                    •                    •                                                                 •           •        •            •                        •     Molecular Visualization
   [pvp]                                                        •                                 •                                                                                                               •     Molecular Visualization
   [RH15]                                                       •                                 •                                                                                                   •           •     Molecular Visualization
   [RK15]                                                       •                                 •                                                                                                               •     Molecular Visualization
   [CHM04]             •             •                                                            •                                                                                                                     Particle and Volume Visualization
   [COJ15]                                                      •       •            •                                                   •             •           •                     •            •           •     Particle Visualization (SPH)
   [KZSB10]            •             •                                  •                         •                                                    •                                                                Volume and Flow Visualization
   [CSK∗ 11]                                      •                     •            •                                                                                                                            •     Volume Vis. (medical and meteorological)
   [Con12]                                        •                     •            •                                                                                                                            •     Volume Vis. (medical)
   [JJAM11]                                                     •       •                                                                              •                                                                Volume Visualization (medical)
   [JKD∗ 12]                                                    •       •                         •                                                    •           •                                              •     Volume Visualization (medical)
   [MF12]                                                       •       •            •                                                                                                   •                        •     Volume Visualization
   [NJ12]                                                       •       •                                                                                                                                         •     Volume Visualization
   [JLC∗ 14]                                                    •       •                         •                                                    •           •        •            •                        •     Volume Visualization (medical)
   [HRA∗ ]                                                      •       •                         •                                                                                                               •     Volume Visualization (medical)
   [HKBR∗ 14]                                                   •                                 •                                                                                                   •           •     Volume Visualization (medical)
   [HSZ15]             •                                        •       •                                                                              •                    •                                     •     Volume Visualization (medical)
   [YSG15]                                                      •       •                                                                                                   •                         •           •     Volume Visualization (meteorological)




 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
568                                      Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

example molecular dynamics for materials [GBM∗ 12] or chem-                   aggregation and analysis of hot topics across twitter, YouTube and
istry [LBPH10], and SPH for fluids in general [AIAT12] or cos-                flickr provided by ScatterBlogs [BTW∗ 11, BTH∗ 13] to obtain sit-
mological simulations [FSW09]. Here, the simulated data can con-              uational awareness. Since this data is already located in the cloud,
sist of hundreds of millions of particles [FAW10,KWN∗ 14], which              a cloud-based analysis solution is a natural choice. The same is
without careful preprocessing or specific hardware cannot be ren-             of course true for other social media networks such as facebook,
dered locally any more. This calls for remote aggregation to some             where a lot of effort is put into data warehousing and analytics in-
LOD representation [MAPV15] and transmission of the resulting                 frastructure [TSA∗ 10].
small subsets of the data for local rendering, which scales to the
                                                                                 Recently, open data initiatives are appearing in a lot of areas. A
order of 106 [GRE09]. As the simulations that generate such data
                                                                              prominent example is government data, which is offered by many
sets run for considerable time on large clusters, also the scenario
                                                                              countries (e.g., https://www.govdata.de/ for Germany or
of ubiquitous simulation monitoring is an important application.
                                                                              https://www.data.gov/ for the U.S.). These sites offer a
The user can periodically connect to a running simulation for a
                                                                              huge amount of data from diverse sectors, for example reaching
rough overview that helps decide whether the run is converging
                                                                              from finance and economy to air quality and college scores. Con-
or exhibiting some major problems. This is useful to reduce costs
                                                                              sequently, these data are again of interest to the general public as
for misconfigured or otherwise faulty simulations. Another typical
                                                                              well as experts, for example economists. Visualizations are needed
use case is post-mortem analysis of the simulation data. Here, the
                                                                              to conveniently access these data. Web-based visualization appli-
aforementioned issue of data set sizes that scales linearly with the
                                                                              cations are especially suitable in this field since they grant fast and
length of the simulation becomes increasingly important since MD
                                                                              convenient access to this data without the need to install complex
simulations usually require long time scales while maintaining suf-
                                                                              software. Here, the amount of data that has to be transferred to the
ficiently small time differences. Consequently, data transfer has to
                                                                              end user is often not very large; the main challenge is rather pro-
highly optimized in order to maintain interactive updates.
                                                                              viding simple mechanisms for extracting the sought information
   Volume visualization is also a common means for analyzing                  as well as providing a comprehensible visualization for users with
medical data at different scales as well as materials. Besides the            different levels of expertise.
technical data size issues, remote access is a great benefit in the              These aforementioned application scenarios are only a few ex-
medical scenario, as it allows multiple experts from disjunct loca-           amples of application areas that would benefit from web-based vi-
tions to view patient data and discuss their findings. Hence, the web         sualization or that are already using it and would benefit from im-
platform with chat and discussion functionality can be valuable, es-          provements. As discussed in section 2, the technological founda-
pecially since many services are becoming available that allow for            tions for building interactive high-quality visualization applications
remote conferencing without installing a client, like Google hang-            are already available today. The visualization applications and pro-
outs, Discord, or Skype. Furthermore, collaborative web-based vi-             totypes discussed in section 3 can act as references for future devel-
sualizations that allow users to make and share annotations in real           opments. On the one hand, our classification of these applications
time could significantly reduce the time to treatment, which can              given in section 4 facilitates this by providing an overview of tech-
often be a life-saving factor.                                                nologies that were successfully applied for different application do-
   Abstract data, respectively web-based information visualization            mains. On the other hand, Table 1 also shows white spots where
techniques constitute the other large portion of possible application         technical aspects have not yet been exploited or where technical
areas. Ensuing from the medical visualization scenario, the single            problems have not yet been solved for the respective domain. One
data set visualization as described by Jiménez et al. [JLC∗ 14] could         obvious example is the absence of efficient optimization methods
be complemented by visualizing patient data, for example at the               to reduce latency, bandwidth, or rendering times for information
gene level [VKB∗ 15], to cross-reference similarities in CT/MRI               visualization. It remains to be investigated if the currently available
data with genetic features of the patients. This way, a holistic ap-          optimization methods are not suitable for this domain or if opti-
proach to patient data analysis can be devised, potentially revealing         mization was not yet necessary due to the nature of the data. How-
patterns that allow to predict illnesses from genetic predisposition          ever, with the growing availability of big data, we estimate this to
to optimize treatment.                                                        be an area that will gain importance in the near future.
                                                                                 Another condition that is apparent in Table 1 is the scarce use of
   Abstract data currently is mostly associated with so-called big
                                                                              grid- and cloud-based infrastructures. Although there are promis-
data, i. e. data that is produced by a large number of users utilizing
                                                                              ing examples for the successful application of these infrastruc-
some kind of service. These services are usually web-based them-
                                                                              tures, the problem of cost remains. Naturally, the cost for acquir-
selves, like search engines, social networks, other online communi-
                                                                              ing and operating the infrastructure rises with the number of users.
ties, and web stores. This means that data is already in the cloud and
                                                                              This might prevent providers of web-based visualization applica-
as such naturally consumed and analyzed in this self same environ-
                                                                              tions from choosing this direction. As discussed below in section 6,
ment. One simple example of such an analysis is the web-based pi-
                                                                              cloud-based visualization might be a promising direction for future
wik system (http://piwik.org/), which collects site access
                                                                              applications.
and navigation patterns and displays them using jqplot (http:
//www.jqplot.com/) and tabular layouts. The analysis is used                    Another issue is that the bandwidth available for data transfer
to check for impact and analyze so-called conversion rate, i. e. the          does not improve with the same rate with which data set sizes
conversion from a normal site user to a paying customer, and how it           grow. As mentioned above, moving large amounts of data is a yet
might have been triggered. Another example would be the real-time             unsolved problem. This problem is especially prominent in case

                                                                                                                                                  c 2016 The Author(s)
                                                                                 Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                   569

of mobile use. Compression methods and optimization methods                              width is used and computation requirements for local rendering are
that either reduce the amount of data that has to be transferred or                      minimized.
use progressive data models can only counteract this to a certain
                                                                                            Visualization of large data sets may require data management
point. Therefore, although visualization technologies for the web
                                                                                         capabilities similar to those available in databases. Building visual-
have made huge advances in recent years, using server-side ren-
                                                                                         ization algorithms on top of a data management and analysis plat-
dering where only the final images are streamed will probably still
                                                                                         form would spare the visualization algorithms from data manage-
be a viable alternative to client-based rendering in the near future,
                                                                                         ment issues and challenges of the heterogeneity of the data sources.
even though these methods have their own inherent limitations and
                                                                                         The visualization layer would focus only on mapping and rendering
drawbacks. Consequently, developers designing new web-based vi-
                                                                                         steps of the visualization pipeline. Data access and filtering can be
sualization applications have to choose carefully from the pool of
                                                                                         handled by a separate data service layer that hides the differences
available methods to provide the best user experience.
                                                                                         of data sources and presents a uniform data access interface to
                                                                                         the visualization layer. Scientific databases like SciDB [SBZB13]
6. Conclusions and Challenges                                                            that combine data management and analysis capabilities can be ex-
                                                                                         ploited for remote visualization of large data sets.
6.1. Conclusions
                                                                                            RESTful services [Pau14] have become a predominant approach
Motivated by rapidly growing data sets from simulations, sensors,                        for implementing web services due to their simplicity and for ef-
and other digital information sources, remote visualization is gain-                     fectively leveraging the web infrastructure for scalability and per-
ing a renewed interest and strives to leverage powerful computation                      formance. The introduction of WebGL [Khr11b, Khr13] in the web
resources to enable scientists and engineers to make sense of the                        browsers combined with modern web technologies introduced in
massive data sets.                                                                       HTML5 [W3C14] standard have given the browser the capability to
                                                                                         become a preferred platform for deployment of interactive graph-
  The main challenges for remote visualization are still bandwidth
                                                                                         ics applications. Given the ubiquity of browsers across different
and latency. Of the two main challenges for remote visualization,
                                                                                         devices, visualization tools can harness all the computational re-
bandwidth has received the most attention through various com-
                                                                                         sources available to support collaborative visualization for research
pression techniques (e.g., LZ4 [lz4] and ZFP [Lin14]) and video
                                                                                         teams that are geographically distributed. By combining mobile,
encoding techniques. Latency has not been adequately addressed.
                                                                                         web, and cloud computing technologies, complex problems can be
This makes latency reduction and latency-tolerant techniques an
                                                                                         tackled by bringing together experts across the globe to work on a
important agenda for research in interactive remote visualization.
                                                                                         problem and, thus, accelerate scientific discovery.
   There has been much improvement on the computational re-
sources available on the client side. It is now common for mobile                        6.2. Challenges
devices (e.g., smart phones, tablets, and laptops) to be equipped
with multi-core CPUs and graphics cards that can handle com-                             The main challenge for cloud-based visualization is limited sup-
putational tasks that a few years ago were restricted to desktop                         port for GPU access from the virtual machines. Although the ren-
computers. As the trend towards collaborative research and mobile                        dering part can be shifted to client devices (the majority of which
researchers accelerates, visualization techniques that harness the                       are currently fitted with GPUs), still GPU access in the cloud is
power of mobile devices and server-side technologies (e.g., cloud                        important for visualization techniques that depend on technologies
computing) will become more attractive.                                                  like CUDA and OpenCL for more demanding computations (e.g.,
                                                                                         preprocessing). As discussed in section 2.3, a preferred approach
   Remote visualization with remote rendering and image/video                            for interactive cloud-based visualization is cloud computation with
streaming is based on the assumption that the client machines do                         client-side rendering. Interactive cloud-based visualization can
not have enough computational power to perform rendering at in-                          benefit by leveraging GPU acceleration in the cloud the same way
teractive frame rates. However, this is now changing due to im-                          cloud gaming is benefiting from GPU acceleration (e.g., rendering
provements on CPU and GPU technology on mobile devices and                               and video encoding done on the GPU) [OTO13,SLNC13,CCT∗ 11].
networking technology. Hybrid visualization approaches, where
                                                                                            Another challenge is that existing visualization tools were not
expensive preprocessing steps are offloaded to the server or cloud
                                                                                         designed for virtualized and elastic computing infrastructure. For
and rendering performed in the client, are more promising because
                                                                                         these applications to be deployed in the cloud and take advantage
they exploit the entire spectrum of the available computational re-
                                                                                         of its elasticity benefits (ability to scale down and up depending
sources. Moreover, rendering on the client side addresses the prob-
                                                                                         on current workload), redesigning them into the so called Cloud-
lem of network latency, which is crucial for interactive visualiza-
                                                                                         Native Applications [ABLS13] would be required. Moreover, vi-
tion.
                                                                                         sualization tools will need to be easily integrated with other tools
   As the data sets continue to grow, even if it becomes possible                        (e.g., simulation and analysis tools) to support seamless analysis
to visualize all the data, the images generated may become hard to                       workflows and spare researchers from manual integration of differ-
comprehend due to limitations of the human visual system [HE12,                          ent tools. Service-oriented software techniques can also prove help-
KU00]. Rather than trying to visualize all the data at once, query-                      ful in this regard. Different tools running on different platforms and
based visualization techniques [SWR∗ 12, GABJ08, SSWB05] that                            written in different programming languages should be able to com-
extract only a subset of the data relevant for the task at hand will                     municate and share their data based on standard communication
gain importance. By selecting only a subset of the data, less band-                      protocols.

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
570                                        Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

References                                                                         computing as a service infrastructure to deliver adaptive, secure and scal-
                                                                                   able user centric data visualisation. In Proceedings of the 20th Interna-
[ABLS13] A NDRIKOPOULOS V., B INZ T., L EYMANN F., S TRAUCH S.:                    tional Conference on 3D Web Technology (New York, NY, USA, 2015),
  How to adapt applications for the cloud environment. Computing 95, 6             Web3D ’15, ACM, pp. 39–47. doi:10.1145/2775292.2775299.
  (2013), 493–535. doi:10.1007/s00607-012-0248-2. 17                               9
[AFG∗ 10] A RMBRUST M., F OX A., G RIFFITH R., J OSEPH A. D.,                   [BOH11] B OSTOCK M., O GIEVETSKY V., H EER J.: D3: Data-driven
  K ATZ R., KONWINSKI A., L EE G., PATTERSON D., R ABKIN A., S TO -               documents. IEEE Trans. Vis. Comput. Graphics (2011). 9, 13
  ICA I., Z AHARIA M.: A view of cloud computing. Commun. ACM 53,
  4 (#apr# 2010), 50–58. doi:10.1145/1721654.1721672. 5                         [BSDW12] BACHTHALER S., S ADLO F., DACHSBACHER C.,
                                                                                  W EISKOPF D.: Space-time visualization of dynamics in lagrangian
[AIAT12] A KINCI G., I HMSEN M., A KINCI N., T ESCHNER M.: Paral-                 coherent structures of time-dependent 2d vector fields. International
  lel surface reconstruction for particle-based fluids. Computer Graphics         Conference on Information Visualization Theory and Applications
  Forum 31, 6 (2012), 1797–1809. doi:10.1111/j.1467-8659.                         (2012), 573–583. 14
  2012.02096.x. 16
                                                                                [BTH∗ 13] B OSCH H., T HOM D., H EIMERL F., P UTTMANN E., KOCH
[AMD15] Amd: Virtualization, 2015. [Online; accessed 15.04.2016].                 S., K RUGER R., W ORNER M., E RTL T.: ScatterBlogs2: Real-Time
  URL:          http://www.amd.com/en-us/solutions/                               Monitoring of Microblog Messages through User-Guided Filtering.
  professional/virtualization. 5, 6                                               IEEE Transactions on Visualization and Computer Graphics 19, 12
[Apa10] A PACHE: Apache CloudStack Open Source Cloud Computing.                   (2013), 2022–2031. doi:10.1109/TVCG.2013.186. 16
  https://cloudstack.apache.org/, 2010. [Online; accessed                       [BTW∗ 11] B OSCH H., T HOM D., W ORNER M., KOCH S., P UTTMANN
  10.08.2015]. 5                                                                  E., JACKLE D., E RTL T.: ScatterBlogs: Geo-spatial document analy-
[ASK∗ 15]    A NDRIOTI H., S TAMOULIAS A., K APETANAKIS K., PANA -                sis. In 2011 IEEE Conference on Visual Analytics Science and Tech-
  GIOTAKIS   S., M ALAMOS A. G.: Integrating webrtc and x3dom: bridg-             nology (VAST) (2011), pp. 309–310. doi:10.1109/VAST.2011.
  ing the gap between communications and graphics. In Proceedings of              6102488. 16
  the 20th International Conference on 3D Web Technology (2015), ACM,           [BWF∗ 00] B ERMAN H. M., W ESTBROOK J., F ENG Z., G ILLILAND G.,
  pp. 9–15. 7                                                                     B HAT T. N., W EISSIG H., S HINDYALOV I. N., B OURNE P. E.: The
[AW14] A NDREWS K., W RIGHT B.: FluidDiagrams: Web-Based In-                      protein data bank. Nucleic Acids Research 28, 1 (2000), 235–242. URL:
  formation Visualisation using JavaScript and WebGL. In EuroVis -                http://www.pdb.org, doi:10.1093/nar/28.1.235. 11
  Short Papers (2014), Elmqvist N., Hlawitschka M., Kennedy J., (Eds.),         [CADB∗ 10] C ALLIERI M., A NDREI R. M., D I B ENEDETTO M.,
  The Eurographics Association. doi:10.2312/eurovisshort.                         Z OPPÈ M., S COPIGNO R.: Visualization methods for molecular studies
  20141155. 13, 15                                                                on the web platform. In Proceedings of the 15th International Confer-
[bab] BabylonJS - 3D engine based on WebGL/Web Audio and                          ence on Web 3D Technology (New York, NY, USA, 2010), Web3D ’10,
   JavaScript. (last accessed 2015/12/15). URL: http://www.                       ACM, pp. 117–126. doi:10.1145/1836049.1836067. 11, 15
   babylonjs.com/. 7                                                            [CCT∗ 11] C HEN K.-T., C HANG Y.-C., T SENG P.-H., H UANG C.-Y.,
[BD07] B RUTZMAN D., DALY L.: X3D: Extensible 3D Graphics for                     L EI C.-L.: Measuring the latency of cloud gaming systems. In Pro-
  Web Authors. Morgan Kaufmann Publishers Inc., San Francisco, CA,                ceedings of the 19th ACM International Conference on Multimedia
  USA, 2007. 8, 12                                                                (New York, NY, USA, 2011), MM ’11, ACM, pp. 1269–1272. doi:
                                                                                  10.1145/2072298.2071991. 6, 17
[BDG∗ 04] B RODLIE K., D UCE D., G ALLOP J., S AGAR M., WALTON
  J., W OOD J.: Visualization in grid computing environments. In In Pro-        [CHM04] C HARTERS S. M., H OLLIMAN N. S., M UNRO M.: Visualiza-
  ceedings of IEEE Visualization (2004), pp. 155–162. 4, 15                       tion on the grid: A web service approach. In Proceedings UK eScience
                                                                                  third All-Hands Meeting (2004), pp. 202–209. 3, 5, 15
[BE14] BADAM S. K., E LMQVIST N.: Polychrome: A cross-device
  framework for collaborative web visualization. In Proceedings of the          [COJ15] C HANDLER J., O BERMAIER H., J OY K. I.: WebGL-Enabled
  Ninth ACM International Conference on Interactive Tabletops and Sur-            Remote Visualization of Smoothed Particle Hydrodynamics Simula-
  faces (New York, NY, USA, 2014), ITS ’14, ACM, pp. 109–118. doi:                tions. In Eurographics Conference on Visualization (EuroVis) - Short
  10.1145/2669485.2669518. 14                                                     Papers (2015), Bertini E., Kennedy J., Puppo E., (Eds.), The Eurograph-
                                                                                  ics Association. doi:10.2312/eurovisshort.20151116. 11,
[BEJZ09] B EHR J., E SCHLER P., J UNG Y., Z ÖLLNER M.: X3dom: a
                                                                                  15
  dom-based html5/x3d integration model. In Proceedings of the 14th In-
  ternational Conference on 3D Web Technology (2009), ACM, pp. 127–             [Con12] C ONGOTE J.: Medx3dom: Medx3d for x3dom. In Proceed-
  135. 6                                                                          ings of the 17th International Conference on 3D Web Technology (2012),
                                                                                  ACM, pp. 179–179. 12, 15
[BJDA11] B EHR J., J UNG Y., D REVENSEK T., A DERHOLD A.: Dy-
  namic and interactive aspects of x3dom. In Proceedings of the 16th In-        [CSK∗ 11] C ONGOTE J., S EGURA A., K ABONGO L., M ORENO A.,
  ternational Conference on 3D Web Technology (2011), ACM, pp. 81–87.             P OSADA J., RUIZ O.: Interactive visualization of volumetric data with
  6                                                                               webgl in real-time. In Proceedings of the 16th International Conference
                                                                                  on 3D Web Technology (New York, NY, USA, 2011), Web3D ’11, ACM,
[BJFS12] B EHR J., J UNG Y., F RANKE T., S TURM T.: Using images
                                                                                  pp. 137–146. doi:10.1145/2010425.2010449. 7, 12, 15
  and explicit binary container for efficient and incremental delivery of
  declarative 3d scenes on the web. In Proceedings of the 17th Interna-         [CWSR12] C HOY S., W ONG B., S IMON G., ROSENBERG C.: The
  tional Conference on 3D Web Technology (2012), Web3D ’12, pp. 17–25.            brewing storm in cloud gaming: A measurement study on cloud to end-
  doi:10.1145/2338714.2338717. 9                                                  user latency. In Proceedings of the 11th Annual Workshop on Net-
                                                                                  work and Systems Support for Games (Piscataway, NJ, USA, 2012),
[BJK∗ 10] B EHR J., J UNG Y., K EIL J., D REVENSEK T., Z OELLNER M.,
                                                                                  NetGames ’12, IEEE Press, pp. 2:1–2:6. 6
  E SCHLER P., F ELLNER D.: A scalable architecture for the html5/x3d
  integration model x3dom. In Proceedings of the 15th International Con-        [d’A11] D ’AURIOL B. J.: Serviceable visualizations. The Jour-
  ference on Web 3D Technology (New York, NY, USA, 2010), Web3D                    nal of Supercomputing 61, 3 (2011), 1089–1115. doi:10.1007/
  ’10, ACM, pp. 185–194. doi:10.1145/1836049.1836077. 6, 8                         s11227-011-0687-0. 3, 15
[BMP∗ 15] B EHR J., M OUTON C., PARFOURU S., C HAMPEAU J.,                      [Dan12] DANCHILLA B.: Three.js framework.                         In Beginning We-
  J EULIN C., T HÖNER M., S TEIN C., S CHMITT M., L IMPER M.,                     bGL for HTML5. Apress, 2012, pp. 173–203.                        doi:10.1007/
  DE S OUSA M., F RANKE T. A., VOSS G.: webvis/instant3dhub: Visual               978-1-4302-3997-0_7. 4, 7, 8, 11, 12, 13


                                                                                                                                                    c 2016 The Author(s)
                                                                                   Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                        571

[DBPGS10] D I B ENEDETTO M., P ONCHIO F., G ANOVELLI F.,                                 [FK99] F OSTER I., K ESSELMAN C. (Eds.): The Grid: Blueprint for a
  S COPIGNO R.: Spidergl: A javascript 3d graphics library for next-                        New Computing Infrastructure. Morgan Kaufmann Publishers Inc., San
  generation www. In Web3D 2010. 15th Conference on 3D Web technol-                         Francisco, CA, USA, 1999. 4
  ogy (2010). URL: http://vcg.isti.cnr.it/Publications/                                  [FKNT02] F OSTER I., K ESSELMAN C., N ICK J. M., T UECKE S.: The
  2010/DPGS10. 8, 11                                                                        physiology of the grid: An open grid services architecture for dis-
[DJL15] D ESPRAT C., J ESSEL J.-P., L UGA H.: A 3d collaborative ed-                        tributed systems integration. URL: http://toolkit.globus.
  itor using webgl and webrtc. In Proceedings of the 20th International                     org/alliance/publications/papers/ogsa.pdf. 4
  Conference on 3D Web Technology (2015), ACM, pp. 157–158. 7                            [FKT01] F OSTER I., K ESSELMAN C., T UECKE S.: The anatomy of
[DP15] DWORAK D., P IETRUSZKA M.: New Research in Multimedia                                the grid: Enabling scalable virtual organizations. Int. J. High Per-
  and Internet Systems. Springer International Publishing, Cham, 2015,                      form. Comput. Appl. 15, 3 (Aug. 2001), 200–222. doi:10.1177/
  ch. Fast Encoding of Huge 3D Data Sets in Lossless PNG Format,                            109434200101500302. 4
  pp. 15–24. doi:10.1007/978-3-319-10383-9_2. 9                                          [FM11] F ETTE I., M ELNIKOV A.: The WebSocket Protocol. http://
                                                                                            www.rfc-editor.org/info/rfc6455, 2011. Online; accessed
[DPD∗ 15] D IEHL A., P ELOROSSO L., D ELRIEUX C., S AULO C., RUIZ
                                                                                            2015.03.09. 7
  J., G RÖLLER M. E., B RUCKNER S.: Visual analysis of spatio-temporal
  data: Applications in weather forecasting. Computer Graphics Forum                     [Fos05] F OSTER I.: Globus toolkit version 4: Software for service-
  34, 3 (May 2015), 381–390. doi:10.1111/cgf.12650. 12, 15                                  oriented systems. In Proceedings of the 2005 IFIP International Con-
                                                                                            ference on Network and Parallel Computing (Berlin, Heidelberg, 2005),
[DS05] D UCE D. A., S AGAR M.: skML a Markup Language for Dis-                              NPC’05, Springer-Verlag, pp. 2–13. doi:10.1007/11577188_2.
  tributed Collaborative Visualization. In EG UK Theory and Practice of                     2, 4, 5
  Computer Graphics (2005), Lever L. M., McDerby M., (Eds.), The Eu-
  rographics Association. doi:10.2312/LocalChapterEvents/                                [FRSVP14] F IGUEIREDO M., RODRIGUES J., S ILVESTRE I., V EIGA -
  TPCG/TPCGUK05/171-178. 4                                                                  P IRES C.: Web3d visualization of high detail and complex 3d-mesh
                                                                                            caves models. In Information Visualisation (IV), 2014 18th International
[DS09] D OWTY M., S UGERMAN J.: Gpu virtualization on vmware’s                              Conference on (July 2014), pp. 275–280. doi:10.1109/IV.2014.
  hosted i/o architecture. SIGOPS Oper. Syst. Rev. 43, 3 (July 2009), 73–                   15. 8, 12, 15
  82. doi:10.1145/1618525.1618534. 6                                                     [FSW09] F RAEDRICH R., S CHNEIDER J., W ESTERMANN R.: Explor-
[DVS∗ 12] D EBOOSERE L., VANKEIRSBILCK B., S IMOENS P.,                                     ing the millennium run - scalable rendering of large-scale cosmological
  D E T URCK F., D HOEDT B., D EMEESTER P.: Cloud-based desktop                             datasets. IEEE Transactions on Visualization and Computer Graphics
  services for thin clients. Internet Computing, IEEE 16, 6 (Nov 2012),                     15, 6 (2009), 1251–1258. 16
  60–67. doi:10.1109/MIC.2011.139. 6                                                     [FZRL08] F OSTER I., Z HAO Y., R AICU I., L U S.: Cloud computing
[EE99] E NGEL K., E RTL T.: Texture-based volume visualization for                          and grid computing 360-degree compared. In Grid Computing En-
  multiple users on the world wide web. In Virtual Environments, Gervautz                   vironments Workshop, 2008. GCE ’08 (Nov 2008), pp. 1–10. doi:
  M., Schmalstieg D., Hildebrand A., (Eds.), Eurographics. Springer Vi-                     10.1109/GCE.2008.4738445. 5
  enna, 1999, pp. 115–124. doi:10.1007/978-3-7091-6805-9_                                [GABJ08] G OSINK L., A NDERSON J., B ETHEL E., J OY K.: Query-
  12. 2                                                                                     driven visualization of time-varying adaptive mesh refinement data. Vi-
[EH08] E VANGELINOS C., H ILL C. N.: Cloud computing for parallel                           sualization and Computer Graphics, IEEE Transactions on 14, 6 (Nov
  scientific hpc applications: Feasibility of running coupled atmosphere-                   2008), 1715–1722. doi:10.1109/TVCG.2008.157. 17
  ocean climate models on amazon’s ec2. In In The 1st Workshop on Cloud                  [GBM∗ 12] G ROTTEL S., B ECK P., M ÜLLER C., R EINA G., ROTH J.,
  Computing and its Applications (CCA (2008). 6                                             T REBIN H.-R., E RTL T.: Visualization of electrostatic dipoles in molec-
                                                                                            ular dynamics of metal oxides. Visualization and Computer Graphics,
[EPM13] E RL T., P UTTINI R., M AHMOOD Z.: Cloud Computing: Con-                            IEEE Transactions on 18, 12 (2012), 2061–2068. doi:10.1109/
  cepts, Technology & Architecture, 1st ed. Prentice Hall Press, Upper                      TVCG.2012.282. 16
  Saddle River, NJ, USA, 2013. 5
                                                                                         [GET∗ 13] G OECKS J., E BERHARD C., T OO T., N EKRUTENKO A.,
[ERB∗ 14] E VANS A., ROMEO M., BAHREHMAND A., AGENJO J.,                                    TAYLOR J.:       Web-based visual analysis for high-throughput ge-
  B LAT J.: 3d graphics on the web: A survey. Computers & Graphics                          nomics. BMC Genomics 14, 1 (2013), 1–11. doi:10.1186/
  41 (2014), 43 – 61. doi:10.1016/j.cag.2014.02.002. 7                                      1471-2164-14-397. 13, 15
[ESE00] E NGEL K., S OMMER O., E RTL T.: A framework for interac-                        [GGS∗ 09] G UPTA V., G AVRILOVSKA A., S CHWAN K., K HARCHE H.,
  tive hardware accelerated remote 3d-visualization. In Data Visualization                  T OLIA N., TALWAR V., R ANGANATHAN P.: Gvim: Gpu-accelerated
  2000, de Leeuw W., van Liere R., (Eds.), Eurographics. Springer Vienna,                   virtual machines. In Proceedings of the 3rd ACM Workshop on
  2000, pp. 167–177. doi:10.1007/978-3-7091-6783-0_17. 2                                    System-level Virtualization for High Performance Computing (New
                                                                                            York, NY, USA, 2009), HPCVirt ’09, ACM, pp. 17–24. doi:10.
[ESEE99] E NGEL K., S OMMER O., E RNST C., E RTL T.: Remote 3d
                                                                                            1145/1519138.1519141. 6
  visualization using image-streaming techniques. In In ISIMADE - 11 TH
  Internationl Conference on Systems Research, Informatics and Cyber-                    [GLNS∗ 05] G RAY J., L IU D. T., N IETO -S ANTISTEBAN M., S ZALAY
  netics (1999), pp. 91–96. 2                                                               A., D E W ITT D. J., H EBER G.: Scientific data management in the
                                                                                            coming decade. SIGMOD Rec. 34, 4 (Dec. 2005), 34–41. doi:
[FAW10] F RAEDRICH R., AUER S., W ESTERMANN R.: Efficient High-                             10.1145/1107499.1107503. 1
   Quality Volume Rendering of SPH Data. IEEE Transactions on Vi-
   sualization and Computer Graphics 16, 6 (2010), 1533–1540. doi:                       [GMAC10] G IUNTA G., M ONTELLA R., AGRILLO G., C OVIELLO G.:
   10.1109/TVCG.2010.148. 16                                                                A gpgpu transparent virtualization component for high performance
                                                                                            computing clouds. In Euro-Par 2010 - Parallel Processing, D’Ambra
[FFRR15] F ELTER W., F ERREIRA A., R AJAMONY R., RUBIO J.: An                               P., Guarracino M., Talia D., (Eds.), vol. 6271 of Lecture Notes in Com-
  updated performance comparison of virtual machines and linux con-                         puter Science. Springer Berlin Heidelberg, 2010, pp. 379–391. doi:
  tainers. In Performance Analysis of Systems and Software (ISPASS),                        10.1007/978-3-642-15277-1_37. 6
  2015 IEEE International Symposium on (March 2015), pp. 171–172.
                                                                                         [GNTT10] G OECKS J., N EKRUTENKO A., TAYLOR J., T EAM T. G.:
  doi:10.1109/ISPASS.2015.7095802. 6
                                                                                            Galaxy: a comprehensive approach for supporting accessible, re-
[Fie00] F IELDING R. T.: Architectural Styles and the Design of Network-                    producible, and transparent computational research in the life sci-
   based Software Architectures. PhD thesis, University of California,                      ences.    Genome Biology 11, 8 (2010), R86.            doi:10.1186/
   Irvine, 2000. AAI9980887. 3                                                              gb-2010-11-8-r86. 13

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
572                                        Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

[Gra12] G RAPHICS A.: Cesium - WebGL Virtual Globe and Map Engine,              [JAC∗ 07] J OHN N., A RATOW M., C OUCH J., E VESTEDT D., H UDSON
  2012. (last accessed 2016/04/15). URL: https://cesiumjs.org/.                    A., P OLYS N., P UK R., R AY A., V ICTOR K., WANG Q.: Medx3d:
  14                                                                               standards enabled desktop medical 3d. Studies in health technology and
[GRE09] G ROTTEL S., R EINA G., E RTL T.: Optimized Data Transfer                  informatics 132 (2007), 189–194. 12
  for Time-dependent, GPU-based Glyphs. In IEEE Pacific Visualization           [JAG10] J OURDAIN S., AYACHIT U., G EVECI B.: Paraviewweb, a web
  Symposium (2009), pp. 65–72. 16                                                  framework for 3d visualization and data processing. IADIS International
[GVB∗ 15] G AILLARD J., V IENNE A., BAUME R., P EDRINIS F., P EY-                  Conference on Web Virtual Reality and Three-Dimensional Worlds (07
  TAVIE A., G ESQUIÈRE G.: Urban data visualisation in a web browser.              2010). 14
  In Proceedings of the 20th International Conference on 3D Web Tech-           [JaL16] J ENNY B., Š AVRI Č B., L IEM J.: Real-time raster projection for
  nology (New York, NY, USA, 2015), Web3D ’15, ACM, pp. 81–88.                     web maps. International Journal of Digital Earth 9, 3 (2016), 1–15.
  doi:10.1145/2775292.2775302. 12, 13, 15                                          doi:10.1080/17538947.2014.1002867. 12, 13, 15
[HE12] H EALEY C. G., E NNS J.: Attention and visual memory in visu-            [JAM∗ 09] J OMIER J., AYLWARD S. R., M ARION C., L EE J., S TYNER
  alization and computer graphics. Visualization and Computer Graphics,            M.: A digital archiving system and distributed server-side processing of
  IEEE Transactions on 18, 7 (July 2012), 1170–1188. doi:10.1109/                  large datasets. 14
  TVCG.2011.127. 17
                                                                                [JJAM11] J OMIER J., J OURDAIN S., AYACHIT U., M ARION C.: Re-
[Her13] H ERRERA A.: NVIDIA GRID: graphics accelerated VDI with                    mote visualization of large datasets with midas and paraviewweb. In
  the visual performance of a workstation, 2013. [Online; accessed                 Proceedings of the 16th International Conference on 3D Web Technol-
  10.07.2015]. URL: http://www.nvidia.com/content/grid/                            ogy (New York, NY, USA, 2011), Web3D ’11, ACM, pp. 147–150.
  vdi-whitepaper.pdf. 5                                                            doi:10.1145/2010425.2010450. 2, 14, 15
[HHCC13] H UANG C.-Y., H SU C.-H., C HANG Y.-C., C HEN K.-T.:                   [JKD∗ 12] JACINTO H., K ÉCHICHIAN R., D ESVIGNES M., P ROST R.,
  Gaminganywhere: An open cloud gaming system. In Proceedings of the               VALETTE S.: A web interface for 3d visualization and interactive seg-
  4th ACM Multimedia Systems Conference (New York, NY, USA, 2013),                 mentation of medical images. In Proceedings of the 17th International
  MMSys ’13, ACM, pp. 36–47. doi:10.1145/2483977.2483981.                          Conference on 3D Web Technology (New York, NY, USA, 2012), Web3D
  6                                                                                ’12, ACM, pp. 51–58. doi:10.1145/2338714.2338722. 8, 12,
[HJS98] H ENDIN O., J OHN N. W., S HOCET O.: Medical Volume Ren-                   15
  dering Over the WWW Using VRML and Java. In Medicine Meets                    [JLC∗ 14] J IMÉNEZ J., L ÓPEZ A., C RUZ J., E STEBAN F., NAVAS J.,
  Virtual Reality (Amsterdam, 1998), Westwood, (Ed.), IOS Press and                V ILLOSLADA P., DE M IRAS J. R.: A web platform for the interactive
  Ohmsha, pp. 34–40. 2                                                             visualization and analysis of the 3d fractal dimension of {MRI} data.
[HKBR∗ 14] H AEHN D., K NOWLES -BARLEY S., ROBERTS M., B EYER                      Journal of Biomedical Informatics 51 (2014), 176 – 190. doi:http:
  J., K ASTHURI N., L ICHTMAN J. W., P FISTER H.: Design and evalu-                //dx.doi.org/10.1016/j.jbi.2014.05.011. 7, 12, 15, 16
  ation of interactive proofreading tools for connectomics. Visualization
                                                                                [Jmo09] J MOL: Jmol: an open-source Java viewer for chemical struc-
  and Computer Graphics, IEEE Transactions on 20, 12 (2014), 2466–
                                                                                   tures in 3D. http://www.jmol.org/, 2009. [Online; accessed
  2475. 14, 15
                                                                                   01.04.2014]. 7, 11
[HKZ∗ 11] H INDMAN B., KONWINSKI A., Z AHARIA M., G HODSI A.,
                                                                                [JSm13] JS MOL: JSmol: JavaScript-Based Molecular Viewer From Jmol
  J OSEPH A. D., K ATZ R., S HENKER S., S TOICA I.: Mesos: A platform
                                                                                   . http://sourceforge.net/projects/jsmol/, 2013. [On-
  for fine-grained resource sharing in the data center. In Proceedings of
                                                                                   line; accessed 02.04.2014]. 11
  the 8th USENIX Conference on Networked Systems Design and Imple-
  mentation (Berkeley, CA, USA, 2011), NSDI’11, USENIX Association,             [Khr11a] K HRONOS: Typed Array Specification. http://www.
  pp. 295–308. 6                                                                  khronos.org/registry/typedarray/specs/latest/,
[HLW14] H ONGJIAN L I K WONG -S AK L EUNG T. N., W ONG M.-H.:                     2011. Online; accessed 2016.04.13. 7
  iview: an interactive webgl visualizer for protein-ligand complex. BMC        [Khr11b] K HRONOS:       WebGL 1.0 specification. http://www.
  Bioinformatics 15 (2014), 56. URL: http://istar.cse.cuhk.                       khronos.org/registry/webgl/specs/latest/1.0/,
  edu.hk/iview/, doi:10.1186/1471-2105-15-56. 11, 15                              2011. [Online; accessed 21.02.2014]. 2, 17
[HM90] H ABER R. B., M C NABB D. A.: Visualization idioms: A con-               [Khr13] K HRONOS:        WebGL 2.0 specification. http://www.
  ceptual model for scientific visualization systems. In Visualization in         khronos.org/registry/webgl/specs/latest/2.0/,
  Scientific Computing. IEEE Computer Society Press, 1990, pp. 74–93.             2013. [Online; accessed 21.02.2014]. 2, 17
  3, 5
                                                                                [Khr15] K HRONOS: glTF 1.0 Specification. https://github.com/
[Hop96] H OPPE H.: Progressive meshes. In Proceedings of the 23rd                 KhronosGroup/glTF/tree/master/specification, 2015.
  Annual Conference on Computer Graphics and Interactive Techniques               [Online; accessed 28.01.2016]. 14
  (New York, NY, USA, 1996), SIGGRAPH ’96, ACM, pp. 99–108. doi:
  10.1145/237170.237216. 8                                                      [KHRV04] K RANZLMÜLLER D., H EINZLREITER P., ROSMANITH H.,
                                                                                  VOLKERT J.: Grid-enabled visualization with gvk. In Grid Comput-
[Hop98] H OPPE H.: Efficient implementation of progressive meshes.                ing, Fernandez Rivera F., Bubak M., Gomez Tato A., Doallo R., (Eds.),
  Computers & Graphics 22, 1 (1998), 27 – 36. doi:http://dx.doi.                  vol. 2970 of Lecture Notes in Computer Science. Springer Berlin Heidel-
  org/10.1016/S0097-8493(97)00081-2. 8                                            berg, 2004, pp. 139–146. doi:10.1007/978-3-540-24689-3_
[HRA∗ ] H AEHN D., R ANNOU N., A HTAM B., G RANT E., P IENAAR                     18. 4, 5, 15
  R.: Neuroimaging in the browser using the x toolkit. Frontiers in             [KMS∗ 15]      KOVAL Y., M ENDRUL H., S ALNIKOV A., S LIUSAR I., S U -
  Neuroinformatics, 101. doi:10.3389/conf.fninf.2014.08.                           DAKOV    O.: Interactive dynamical visualization of big data arrays in grid.
  00101. 13, 15                                                                    In Intelligent Data Acquisition and Advanced Computing Systems: Tech-
[HSZ15] H OU X., S UN J., Z HANG J.: A web-based solution for 3d                   nology and Applications (IDAACS), 2015 IEEE 8th International Con-
  medical image visualization. vol. 9418, pp. 941810–941810–8. doi:                ference on (Sept 2015), vol. 1, pp. 153–156. doi:10.1109/IDAACS.
  10.1117/12.2075982. 12, 15                                                       2015.7340718. 4, 15
[IES∗ 11] I SENBERG P., E LMQVIST N., S CHOLTZ J., C ERNEA D., M A              [KPS15] K IM J.-S., P OLYS N., S FORZA P.: Preparing and evaluating
   K.-L., H AGEN H.: Collaborative visualization: Definition, challenges,         geospatial data models using x3d encodings for web 3d geovisualization
   and research agenda. Information Visualization 10, 4 (Oct. 2011), 310–         services. In Proceedings of the 20th International Conference on 3D
   326. doi:10.1177/1473871611412817. 1                                           Web Technology (2015), ACM, pp. 55–63. 12, 15


                                                                                                                                                    c 2016 The Author(s)
                                                                                   Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                      573

[KSL∗ 13] KOHLHOFF K. J., S HUKLA D., L AWRENZ M., B OWMAN                               [MAPV15] M UZIC M. L., AUTIN L., PARULEK J., V IOLA I.: cel-
  G. R., KONERDING D. E., B ELOV D., A LTMAN R. B., PANDE V. S.:                           lVIEW: a Tool for Illustrative and Multi-Scale Rendering of Large
  Cloud-based simulations on Google Exacycle reveal ligand modulation                      Biomolecular Datasets. In EG Workshop on Visual Computing for Bi-
  of GPCR activation pathways. Nature Chemistry 6, 1 (Dec. 2013), 15–                      ology and Medicine (2015). doi:10.2312/vcbm.20151209. 16
  21. doi:10.1038/nchem.1821. 6                                                          [Mer14] M ERKEL D.: Docker: Lightweight linux containers for consis-
[KSWE16] K ARCH G. K., S ADLO F., W EISKOPF D., E RTL T.: Vi-                              tent development and deployment. Linux J. 2014, 239 (Mar. 2014). 6
  sualization of 2D unsteady flow using streamline-based concepts in                     [MF12] M OVANIA M., F ENG L.: High-performance volume rendering
  space-time. Journal of Visualization 19, 1 (2016), 115–128. doi:                         on the ubiquitous webgl platform. In High Performance Computing
  10.1007/s12650-015-0284-z. 14                                                            and Communication 2012 IEEE 9th International Conference on Em-
[KU00] K ASTNER S., U NGERLEIDER L. G.: Mechanisms of visual at-                           bedded Software and Systems (HPCC-ICESS), 2012 IEEE 14th Inter-
  tention in the human cortex. Annual Review of Neuroscience 23 (2000),                    national Conference on (June 2012), pp. 381–388. doi:10.1109/
  315–341. 17                                                                              HPCC.2012.58. 7, 12, 15
[KWN∗ 14] K NOLL A., WALD I., NAVRATIL P., B OWEN A., R EDA K.,                          [MG11] M ELL P. M., G RANCE T.: SP 800-145. The NIST Definition of
  PAPKA M. E., G AITHER K.: Rbf volume ray casting on multicore and                        Cloud Computing. Tech. rep., Gaithersburg, MD, United States, 2011. 5
  manycore cpus. Computer Graphics Forum 33, 3 (2014), 71–80. doi:                       [MG13] M AYORGA A., G LEICHER M.: Splatterplots: Overcoming over-
  10.1111/cgf.12363. 16                                                                    draw in scatter plots. IEEE Transactions on Visualization and Com-
[KZSB10] KOULOUZIS S., Z UDILOVA -S EINSTRA E., B ELLOUM A.:                               puter Graphics 19, 9 (Sept. 2013), 1526–1538. doi:10.1109/TVCG.
  Data transport between visualization web services for medical image                      2013.65. 13
  analysis. Procedia Computer Science 1, 1 (2010), 1727 – 1736. {ICCS}                   [MKB∗ 15] M WALONGO F., K RONE M., B ECHER M., R EINA G., E RTL
  2010. doi:http://dx.doi.org/10.1016/j.procs.2010.                                        T.: Remote visualization of dynamic molecular data using webgl. In
  04.194. 3, 4, 15                                                                         Proceedings of the 20th International Conference on 3D Web Technology
[LBPH10] L INDOW N., BAUM D., P ROHASKA S., H EGE H.-C.: Accel-                            (New York, NY, USA, 2015), Web3D ’15, ACM, pp. 115–122. doi:
  erated visualization of dynamic molecular surfaces. Computer Graph-                      10.1145/2775292.2775307. 7, 8, 11, 15
  ics Forum 29, 3 (2010), 943–952. doi:10.1111/j.1467-8659.                              [MKK∗ 14] M WALONGO F., K RONE M., K ARCH G., B ECHER M.,
  2009.01693.x. 16                                                                         R EINA G., E RTL T.: Visualization of molecular structures using state-
[LCD13] L AVOUÉ G., C HEVALIER L., D UPONT F.: Streaming com-                              of-the-art techniquesin webgl. In Proceedings of the Nineteenth Interna-
  pressed 3d data on the web using javascript and webgl. In Proceed-                       tional ACM Conference on 3DWeb Technologies (New York, NY, USA,
  ings of the 18th International Conference on 3D Web Technology (New                      2014), Web3D ’14, ACM, pp. 133–141. doi:10.1145/2628588.
  York, NY, USA, 2013), Web3D ’13, ACM, pp. 19–27. doi:10.1145/                            2628597. 7, 8, 11, 15
  2466533.2466539. 9                                                                     [MPJ∗ 14] M OUTON C., PARFOURU S., J EULIN C., D UTERTRE C.,
                                                                                           G OBLET J.-L., PAVIOT T., L AMOURI S., L IMPER M., S TEIN C.,
[LCD14] L AVOUÉ G., C HEVALIER L., D UPONT F.: Progressive stream-
                                                                                           B EHR J., J UNG Y.: Enhancing the plant layout design process using
  ing of compressed 3d graphics in a web browser, 2014. (last ac-
                                                                                           x3dom and a scalable web3d service architecture. In Proceedings of the
  cessed 2016/02/02). URL: http://liris.cnrs.fr/~glavoue/
                                                                                           19th International ACM Conference on 3D Web Technologies (2014),
  travaux/conference/SigTalk2014.pdf. 8, 9, 15
                                                                                           Web3D ’14, pp. 125–132. doi:10.1145/2628588.2628592. 14
[Lin14] L INDSTROM P.: Fixed-rate compressed floating-point arrays.
                                                                                         [MVML12] M ORENO -VOZMEDIANO R., M ONTERO R., L LORENTE I.:
   IEEE Transactions on Visualization and Computer Graphics 20, 12
                                                                                           Iaas cloud architecture: From virtualized datacenters to federated cloud
   (2014), 2674–2683. doi:10.1109/TVCG.2014.2346458. 17
                                                                                           infrastructures. Computer 45, 12 (Dec 2012), 65–72. doi:10.1109/
[LJB∗ 13] L IMPER M., J UNG Y., B EHR J., S TURM T., F RANKE T.,                           MC.2012.76. 5
   S CHWENK K., K UIJPER A.: Fast, progressive loading of binary-                        [MYB14] M C C ANN M., YOO B., B RUTZMAN D.: Integration of x3d
   encoded declarative-3d web content. Computer Graphics and Applica-                      geospatial in a data driven web application. In Proceedings of the 19th
   tions, IEEE 33, 5 (Sept 2013), 26–36. doi:10.1109/MCG.2013.                             International ACM Conference on 3D Web Technologies (2014), ACM,
   52. 9, 15                                                                               pp. 145–145. 12, 15
[LJBA13] L IMPER M., J UNG Y., B EHR J., A LEXA M.: The pop buffer:                      [NJ12] N OGUERA J. M., J IMÉNEZ J.-R.: Visualization of very large
   Rapid progressive clustering by geometry quantization. Computer                         3d volumes on mobile devices and webgl. In 20th WSCG International
   Graphics Forum 32, 7 (2013), 197–206. doi:10.1111/cgf.12227.                            Conference on Computer Graphics, Visualization and Computer Vision
   9                                                                                       2012 (2012). 7, 12, 15
[LJH13] L IU Z., J IANG B., H EER J.: immens: Real-time visual querying                  [NVI15a] NVIDIA: NVIDIA GRID PC Streaming Service, 2015. [On-
   of big data. Computer Graphics Forum 32 (2013). 13, 15                                  line; accessed 09.07.2015]. URL: http://shield.nvidia.com/
[Lor04] L ORENSEN B.: On the Death of Visualization. In Position Papers                    grid-game-streaming. 6
  NIH/NSF Proc. Fall 2004 Workshop Visualization Research Challenges                     [NVI15b] NVIDIA: Shared Virtual GPU (vGPU) Technology, 2015.
  (2004). 1                                                                                [Online; accessed 09.07.2015]. URL: http://www.nvidia.com/
[LTBF14] L IMPER M., T HÖNER M., B EHR J., F ELLNER D. W.: Src                             object/virtual-gpus.html. 6
  - a streamable format for generalized web-based 3d data transmission.                  [NWG∗ 09] N URMI D., W OLSKI R., G RZEGORCZYK C., O BERTELLI
  In Proceedings of the 19th International ACM Conference on 3D Web                        G., S OMAN S., YOUSEFF L., Z AGORODNOV D.: The eucalyptus open-
  Technologies (New York, NY, USA, 2014), Web3D ’14, ACM, pp. 35–                          source cloud-computing system. In Cluster Computing and the Grid,
  43. doi:10.1145/2628588.2628589. 9, 15                                                   2009. CCGRID ’09. 9th IEEE/ACM International Symposium on (May
[LWS∗ 13] L IMPER M., WAGNER S., S TEIN C., J UNG Y., S TORK A.:                           2009), pp. 124–131. doi:10.1109/CCGRID.2009.93. 5
  Fast delivery of 3d web content: A case study. In Proceedings of the 18th              [Ope10] O PEN S TACK: OpenStack Open Source Cloud Computing Soft-
  International Conference on 3D Web Technology (New York, NY, USA,                        ware. https://www.openstack.org/, 2010. [Online; accessed
  2013), Web3D ’13, ACM, pp. 11–17. doi:10.1145/2466533.                                   10.08.2015]. 5
  2466536. 9
                                                                                         [OTO13] OTOY:         The Future of Cloud GAMING, 2013. [On-
[lz4] LZ4 - Extremely Fast Compression. (last accessed 2016/04/15).                        line; accessed 09.07.2015]. URL: http://www.otoy.com/cgc/
   URL: http://cyan4973.github.io/lz4/. 17                                                 cloudgaming_2013.pdf. 6, 17

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
574                                          Mwalongo et al. / State-of-the-Art Report in Web-based Visualization

[Pau14] PAUTASSO C.: Restful web services: Principles, patterns, emerg-              S LUSALLEK P.: Xml3d: Interactive 3d graphics for the web. In Pro-
   ing technologies. In Web Services Foundations, Bouguettaya A., Sheng              ceedings of the 15th International Conference on Web 3D Technol-
   Q. Z., Daniel F., (Eds.). Springer New York, 2014, pp. 31–51. doi:                ogy (New York, NY, USA, 2010), Web3D ’10, ACM, pp. 175–184.
   10.1007/978-1-4614-7518-7_2. 3, 17                                                doi:10.1145/1836049.1836076. 6
[PD15] P ONCHIO F., D ELLEPIANE M.: Fast decompression for web-                   [SLNC13] S HEA R., L IU J., N GAI E.-H., C UI Y.: Cloud gaming: ar-
  based view-dependent 3d rendering. In Proceedings of the 20th In-                 chitecture and performance. Network, IEEE 27, 4 (July 2013), 16–21.
  ternational Conference on 3D Web Technology (New York, NY, USA,                   doi:10.1109/MNET.2013.6574660. 6, 17
  2015), Web3D ’15, ACM, pp. 199–207. doi:10.1145/2775292.                        [SML06] S CHROEDER W., M ARTIN K., L ORENSEN B.: The Visual-
  2775308. 8, 9, 10, 14, 15                                                         ization Toolkit (4th ed.): An Object-oriented Approach to 3D Graphics.
[PM15] P LESCH A., M C C ANN M.: The x3d geospatial component:                      Kitware, 2006. 5
  X3dom implementation of geoorigin, geolocation, geoviewpoint, and               [spo] TIBCO Spotfire Cloud. (last accessed 2015/12/15). URL: http:
  geopositioninterpolator nodes. In Proceedings of the 20th International            //spotfire.tibco.com/products/spotfire-cloud. 3,
  Conference on 3D Web Technology (2015), ACM, pp. 31–37. 12, 15                     13, 15
[pvp] pv - WebGL protein viewer. (last accessed 2016/01/27).                      [SSB09] S USELBECK R., S CHIELE G., B ECKER C.: Peer-to-peer sup-
   URL: https://github.com/biasmv/pv, doi:http://dx.                                port for low-latency massively multiplayer online games in the cloud.
   doi.org/10.5281/zenodo.20980. 11, 15                                             In Network and Systems Support for Games (NetGames), 2009 8th An-
[PZL08] PAUTASSO C., Z IMMERMANN O., L EYMANN F.: Restful web                       nual Workshop on (Nov 2009), pp. 1–2. doi:10.1109/NETGAMES.
  services vs. "big"’ web services: Making the right architectural decision.        2009.5446229. 6
  In Proceedings of the 17th International Conference on World Wide Web           [SSS14] S UTTER J., S ONS K., S LUSALLEK P.: Blast: A binary large
  (New York, NY, USA, 2008), WWW ’08, ACM, pp. 805–814. doi:                        structured transmission format for the web. In Proceedings of the 19th
  10.1145/1367497.1367606. 3                                                        International ACM Conference on 3D Web Technologies (New York,
[RAR13] R ICHARDSON L., A MUNDSEN M., RUBY S.: RESTful Web                          NY, USA, 2014), Web3D ’14, ACM, pp. 45–52. doi:10.1145/
  APIs. O’Reilly Media, Inc., 2013. 3                                               2628588.2628599. 9
[RH15] ROSE A. S., H ILDEBRAND P. W.: Ngl viewer: a web appli-                    [SSWB05] S TOCKINGER K., S HALF J., W U K., B ETHEL E.: Query-
  cation for molecular visualization. Nucleic Acids Research 43, W1                 driven visualization of large data sets. In Visualization, 2005. VIS 05.
  (2015), W576–W579. arXiv:http://nar.oxfordjournals.                               IEEE (Oct 2005), pp. 167–174. doi:10.1109/VISUAL.2005.
  org/content/43/W1/W576.full.pdf+html,                        doi:                 1532792. 17
  10.1093/nar/gkv402. 11, 15                                                      [STK02] S NELL J., T IDWELL D., K ULCHENKO P.: Programming Web
[RK15] R EGO N., KOES D.: 3dmol.js: molecular visualization with                    Services with SOAP. O’Reilly & Associates, Inc., Sebastopol, CA, USA,
  webgl. Bioinformatics 31, 8 (2015), 1322–1324. doi:10.1093/                       2002. 5
  bioinformatics/btu829. 11, 15                                                   [SUEW12] S ADLO F., Ü FFINGER M., E RTL T., W EISKOPF D.: On
[RWW14] R ESCH B., W OHLFAHRT R., W OSNIOK C.: Web-based                            the finite-time scope for computing Lagrangian coherent structures from
  4d visualization of marine geo-data using webgl. Cartography and                  Lyapunov exponents. In Topological Methods in Data Analysis and Vi-
  Geographic Information Science 41, 3 (2014), 235–247. arXiv:                      sualization II. Springer Berlin Heidelberg, 2012, pp. 269–281. doi:
  http://dx.doi.org/10.1080/15230406.2014.901901,                                   10.1007/978-3-642-23175-9_18. 14
  doi:10.1080/15230406.2014.901901. 12, 13, 15                                    [SWR∗ 12] S ANDERSON A. R., W HITLOCK B., RÜBEL O., C HILDS
[SBZB13] S TONEBRAKER M., B ROWN P., Z HANG D., B ECLA J.:                          H., W EBER G., P RABHAT M., W U K.: A System for Query Based
  Scidb: A database management system for applications with complex                 Analysis and Visualization. In EuroVA 2012: International Workshop
  analytics. Computing in Science & Engineering 15, 3 (2013), 54–62.                on Visual Analytics (2012), Matkovic K., Santucci G., (Eds.), The Euro-
  doi:http://dx.doi.org/10.1109/MCSE.2013.19. 17                                    graphics Association. doi:10.2312/PE/EuroVAST/EuroVA12/
                                                                                    025-029. 17
[SC12] S AWICKI B., C HABER B.: 3d mesh viewer using html5 tech-
  nology. Przeglad Elektrotechniczny (Electrical Review), ISSN (2012),            [tab] Tableau Online. (last accessed 2015/12/15). URL: https://
  0033–2097. 8                                                                       www.tableau.com/products/cloud-bi. 3, 13, 15

[SC13] S AWICKI B., C HABER B.: Efficient visualization of 3d models              [TDC14] T IAN K., D ONG Y., C OWPERTHWAITE D.: A full gpu virtual-
  by web browser. Computing 95, 1 (2013), 661–673. doi:10.1007/                     ization solution with mediated pass-through. In Proceedings of the 2014
  s00607-012-0275-z. 15                                                             USENIX Conference on USENIX Annual Technical Conference (Berke-
                                                                                    ley, CA, USA, 2014), USENIX ATC’14, USENIX Association, pp. 121–
[SD11] S UTHON P., DALTON C.: Streakline visualization of the struc-                132. 6
  tures in the near wake of a circular cylinder in sinusoidally oscillat-
  ing flow. Journal of Fluids and Structures 27, 7 (2011), 885 – 902.             [TP97] T RAPP J., PAGENDARM H.-G.: A Prototype for a WWW-based
  doi:10.1016/j.jfluidstructs.2011.03.003. 14                                       Visualization Service. In Visualization in Scientific Computing, Lefer
                                                                                    W., Grave M., (Eds.), Eurographics. Springer Vienna, 1997, pp. 21–30.
[See01] S EELY S.: SOAP: Cross Platform Web Service Development Us-                 doi:10.1007/978-3-7091-6876-9_3. 2
   ing XML. Prentice Hall PTR, Upper Saddle River, NJ, USA, 2001. 3,
                                                                                  [TSA∗ 10] T HUSOO A., S HAO Z., A NTHONY S., B ORTHAKUR D., JAIN
   4
                                                                                    N., S EN S ARMA J., M URTHY R., L IU H.: Data warehousing and ana-
[SG15] S ARIKAYA A., G LEICHER M.: Using webgl as an interactive                    lytics infrastructure at facebook. In Proceedings of the 2010 ACM SIG-
  visualization medium: Our experience developing splatterjs. In Pro-               MOD International Conference on Management of Data (2010), SIG-
  ceedings of the Data Systems for Interactive Analysis Workshop (Oct               MOD ’10, pp. 1013–1020. doi:10.1145/1807167.1807278. 16
  2015), Chang R., Scheidegger C., Fisher D., Heer J., (Eds.), IEEE. DSIA
                                                                                  [VKB∗ 15] V EHLOW C., K AO D. P., B RISTOW M. R., H UNTER L. E.,
  ’15. URL: http://graphics.cs.wisc.edu/Papers/2015/
                                                                                    W EISKOPF D., G ÖRG C.: Visual analysis of biological data-knowledge
  SG15. 13, 15
                                                                                    networks. BMC bioinformatics 16, 1 (2015), 1. 16
[SH15] S HI S., H SU C.-H.: A survey of interactive remote rendering
                                                                                  [VPB09] V ECCHIOLA C., PANDEY S., B UYYA R.: High-performance
  systems. ACM Comput. Surv. 47, 4 (May 2015), 57:1–57:29. doi:
                                                                                    cloud computing: A view of scientific applications. In Pervasive Systems,
  10.1145/2719921. 2, 3
                                                                                    Algorithms, and Networks (ISPAN), 2009 10th International Symposium
[SKR∗ 10]    S ONS K., K LEIN F., RUBINSTEIN D., B YELOZYOROV S.,                   on (Dec 2009), pp. 4–16. doi:10.1109/I-SPAN.2009.150. 6


                                                                                                                                                      c 2016 The Author(s)
                                                                                     Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
                                                    Mwalongo et al. / State-of-the-Art Report in Web-based Visualization                                    575

[VSB14] V U L., S IVARAMAN H., B IDARKAR R.: Gpu virtualization                          [ZSYA∗ 08] Z UDILOVA -S EINSTRA E., YANG N., A XNER L.,
  for high performance general purpose computing on the esx hypervisor.                    W IBISONO A., VASUNIN D.: Service-oriented visualization applied to
  In Proceedings of the High Performance Computing Symposium (San                          medical data analysis. Service Oriented Computing and Applications 2,
  Diego, CA, USA, 2014), HPC ’14, Society for Computer Simulation In-                      4 (2008), 187–201. doi:10.1007/s11761-008-0031-6. 3, 5
  ternational, pp. 2:1–2:8. 6
[VSTA14] V IRAG I., S TOICU -T IVADAR L., A M ĂRIC ĂI E.: Browser-
  based medical visualization system. In Applied Computational Intel-
  ligence and Informatics (SACI), 2014 IEEE 9th International Sympo-
  sium on (May 2014), pp. 355–359. doi:10.1109/SACI.2014.
  6840092. 12
[VWvH∗ 07] V IEGAS F., WATTENBERG M., VAN H AM F., K RISS J.,
  M C K EON M.: Manyeyes: a site for visualization at internet scale. Vi-
  sualization and Computer Graphics, IEEE Transactions on 13, 6 (Nov
  2007), 1121–1128. doi:10.1109/TVCG.2007.70577. 13
[W3C04] W3C: Web Services Architecture, 2004. [Online; accessed
  09.07.2015]. URL: http://www.w3.org/TR/ws-arch/. 3
[W3C11] W3C: WebRTC 1.0: Real-time Communication Between
  Browsers. https://www.w3.org/TR/webrtc/, 2011. Online;
  accessed 2016.04.13. 7
[W3C14] W3C: HTML5: A vocabulary and associated APIs for HTML
  and XHTML. http://www.w3.org/TR/html5/, 2014. [Online;
  accessed 01.04.2014]. 2, 17
[W3C15] W3C: HTML Canvas 2D Context. https://www.w3.
  org/TR/2dcontext/, 2015. [Online; accessed 20.01.2016]. 13
[WBHW08] WANG H., B RODLIE K. W., H ANDLEY J. W., W OOD
  J. D.: Service-oriented approach to collaborative visualization. Concur-
  rency and Computation: Practice and Experience 20, 11 (2008), 1289–
  1301. doi:10.1002/cpe.1295. 3
[WBS∗ 08] W OOD J., B RODLIE K., S EO J., D UKE D., WALTON J.: A
  web services architecture for visualization. In eScience, 2008. eScience
  ’08. IEEE Fourth International Conference on (Dec 2008), pp. 1–7.
  doi:10.1109/eScience.2008.51. 3, 4
[WBW96] W OOD J., B RODLIE K., W RIGHT H.: Visualization over the
  world wide web and its application to environmental data. In Proceed-
  ings of the 7th Conference on Visualization ’96 (Los Alamitos, CA, USA,
  1996), VIS ’96, IEEE Computer Society Press, pp. 81–ff. 2
[WJL14] W EN L., J IA J., L IANG S.: Lpm: Lightweight progressive
  meshes towards smooth transmission of web3d media over internet. In
  Proceedings of the 13th ACM SIGGRAPH International Conference on
  Virtual-Reality Continuum and Its Applications in Industry (New York,
  NY, USA, 2014), VRCAI ’14, ACM, pp. 95–103. doi:10.1145/
  2670473.2670475. 8, 9, 15
[WP11] W ILDE E., PAUTASSO C.: REST: From Research to Practice,
  1st ed. Springer Publishing Company, Incorporated, 2011. 3
[WPR10] W EBBER J., PARASTATIDIS S., ROBINSON I.: REST in Prac-
  tice: Hypermedia and Systems Architecture, 1st ed. O’Reilly Media, Inc.,
  2010. 3
[WSD∗ 10] W OOD J., S EO J., D UKE D., WALTON J., B RODLIE K.:
  Flexible delivery of visualization software and services. Procedia Com-
  puter Science 1, 1 (2010), 1719 – 1726. {ICCS} 2010. doi:http:
  //dx.doi.org/10.1016/j.procs.2010.04.193. 4
[Xen14] X EN S ERVER: XenServer Open Source Virtualization Platform.
  http://xenserver.org/, 2014. [Online; accessed 10.08.2015]. 6
[YSG15] YANG Y., S HARMA A., G IRIER A.: Volumetric texture data
  compression scheme for transmission. In Proceedings of the 20th In-
  ternational Conference on 3D Web Technology (New York, NY, USA,
  2015), Web3D ’15, ACM, pp. 65–68. doi:10.1145/2775292.
  2775323. 10, 15
[YWO∗ 12] YANG C.-T., WANG H.-Y., O U W.-S., L IU Y.-T., H SU C.-
  H.: On implementation of gpu virtualization using pci pass-through.
  In Cloud Computing Technology and Science (CloudCom), 2012 IEEE
  4th International Conference on (Dec 2012), pp. 711–716. doi:10.
  1109/CloudCom.2012.6427531. 6

 c 2016 The Author(s)
Computer Graphics Forum c 2016 The Eurographics Association and John Wiley & Sons Ltd.
